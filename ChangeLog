-------------------------------------------------------------------------------
15.07.2009 11:30 (BST), ctr

 Make it possible for farm to have a different install location from the 
 prefix of the software install. (for package management)

-------------------------------------------------------------------------------
11.03.2009 12:01 (GMT), ctr

 * Fix some critical bugs in the serialize module for decoding complicated object/array streams

-------------------------------------------------------------------------------
06.03.2009 14:41 (GMT), ctr

 * Compile cache code. When turned on, this will cause ferite to store code in 
   memory as well as code for the disk. This should speed up compiles significantly.
 * It is a lot harder to have duplicate code running around in the source code.
   This covers functions that have the same name and parameter signature.
 * Global cache should make a slight speed improvement.
 * cache_ferite tool for testing cache performance
 * A number of internal bug fixes

-------------------------------------------------------------------------------
15.02.2009 10:08 (GMT), ctr

 * ferite will detect, and use by default, libgc for memory management. It appears
   to work really well with the VM. I even think there might be a speed improvement.
 * Bumped version number to 1.1.12 due to the changes for the GC.

-------------------------------------------------------------------------------
30.09.2008 11:18 (BST), ctr

 * Fix for the error in utf8Length, it was always out by one per character.
 * Added String.nextCharacterLength
 * Added Array.append
 * Bumped version to 1.1.10

-------------------------------------------------------------------------------
12.09.2008 11:09 (BST), ctr

 * Added a 'variables' value to the generate backtrace routine. This captures
   the values of variables and parameters passed into the functions.
 * Fix a potential issue with printing of error messages from error objects
   into the error system.
 * Bumped version to 1.1.9

-------------------------------------------------------------------------------
01.09.2008 12:18 (BST), ctr

 * Fix for a critical ferite memory issue in the error sub-system. Thanks for
   Tobias <tobias.eriksson@cention.se> for spotting the bug.
 * Upped version to 1.1.8

-------------------------------------------------------------------------------
04.07.2008 18:28 (BST), ctr

 * If ferite can't find a directive, it'll now throw an exception rather than
   silently ignore it.

-------------------------------------------------------------------------------
12.06.2008 17:19 (BST), ctr

 * Fix for evil bug that would cause corruption if you accessed a variable
	from a newly created object returned from a function and also did other
	things afterwards e.g.
	
		function a
			return new A();
			
		b( a().id, someOtherfunction() )
		
	The problem was that the return from a() (having not been assigned) was
	tagged as disposable, even though a reference to 'id' was still held. This
	meant that when the internal clean happened, 'id' was killed and we had
	a dangling pointer.

-------------------------------------------------------------------------------
10.06.2008 17:29 (BST), ctr

 * Fixed two critical bugs:

	1) The executor was over keen in freeing variables especially when there is
	variables left on the call record.
	
	2) The is_dots variable was not initialised correctly on a function call 
	record meaning that there is a slight chance that the wrong function would 
	be validated as having the correct parameters.
	
  This was exhibited in random occurrences especially when the jedi memory
  manager is used.

-------------------------------------------------------------------------------
08.04.2008 03:12 (BST), ctr

  * Fix for building executables on Linux

-------------------------------------------------------------------------------
28.03.2008 11:58 (GMT), ctr

 * Make the network module use the correct network read/write functions

-------------------------------------------------------------------------------
04.10.2007 10:52 (BST), ctr

  * Fix directives so that it wont nuke things if you pass too many paramters

-------------------------------------------------------------------------------
29.08.2007 12:42 (BST), ctr

 * Rename ->ccode to ->bytecode
 * Added stuff to allow a backtrace to be obtained at any point within the 
   execution of a program!
 * Obj.backtrace() and Error.backtrace()
 * Moved some functions about to make their location more logical

-------------------------------------------------------------------------------
23.08.2007 12:56 (BST), ctr

 * Fix an error when declaring a namespace function the same name as something 
   else within the same namespace. It would cause memory errors and the like.

-------------------------------------------------------------------------------
23.08.2007 11:29 (BST), ctr

 * You can no longer have empty handle blocks (therefore you can't just suppress
   an error with a monitor{}handle{} block which should reduce sloppy programming
   using this construct)

-------------------------------------------------------------------------------
22.08.2007 12:15 (BST), ctr

 * Documentation for functions in FileSystem.fec, String.fec, Math.fec
 * A couple of functions within the Math namespace for providing a random number
   within a given range and to create a bit array of a given size.
 * feritedoc: @requires allowing the noting of a module an item needs
 * feritedoc: 'provided by' the documentation will note where the class/namespace
   was located.
 * vm: improved error message on backtrace when dealing with functions within a 
   namespace
 * vm: fixed attribute_missing for namespaces

-------------------------------------------------------------------------------
20.08.2007 14:09 (BST), ctr

 * Fix for attribute missing in namespaces

-------------------------------------------------------------------------------
05.07.2007 16:30 (BST), ctr

 * Work on expansions (macros) and directives (compiler functions) syntax and
   deployment. Various cleanups 
 * Tidy ups and clean ups of some of the scanner stuff

-------------------------------------------------------------------------------
25.01.2007 13:06 (GMT), ctr

  * Array changes now work for all the assignment operators
  * No longer able to assign to compiled in constant values

-------------------------------------------------------------------------------
25.01.2007 12:01 (GMT), ctr

  * Arrays now know if they are being assigned to or just getting out a value
  * An exception will be thrown if you are trying to access a non existent key!
    This is a change in behavior, old behaviour would silently create the array
    index for you, you should now use .keyExists or check your index is within
    the array bounds.
  * Cleaner array exception messages

-------------------------------------------------------------------------------
24.01.2007 09:28 (GMT), ctr

  * Remove FeriteVariableHash as it isn't used

-------------------------------------------------------------------------------
23.01.2007 17:11 (GMT), ctr

  * famt.h and ferite_amt.c:

	This is an implementation of AMT's as described in the paper 'Ideal Hash Tries' by Phil Bagwell
	It follows the described version within the paper and extends it with some changes:
	  - The AMT can be initialised to consider either the high or low order bits as significant
	  - The AMT sub-trees can be initialised as having direct or compressed storage. The compressed
	    is the same as the one in the paper, direct is the whole base storage allocated.
	
	These changes are designed to allow better use within ferite.

  * 2006 -> 2007

-------------------------------------------------------------------------------
22.01.2007 11:32 (GMT), ctr

  * Some more internal changes to make ferite cleaner and use less memory

-------------------------------------------------------------------------------
24.12.2006 14:21 (GMT), ctr

  * It is now possible to use attribute access on an array to pull out keys.

	array a = [ 'Example' => 42 ];
	(a.Example == a['Example']) == true

  * attribute_missing will now work with namespaces.
  * method_missing will be correctly invoked when dealing with functions on
    array, string and number variables.

-------------------------------------------------------------------------------
24.11.2006 07:09 (CET), ctr

  * Added the ability for farm build rules to pass special flags to the 
    compilers. This allows a shared library to dictate how c code should be
    compiled.
  * farm will output the command it is running to the build log, this allows
    the developer to make sense of errors more easily.
  * darwin will now build ferite, ferite command line and builder, just need
    to write the ferite-module target tag stuff to make doing the modules
    easier.
  * initial farm.yard file for ferite

-------------------------------------------------------------------------------
31.10.2006 09:09 (GMT), ctr

  * true/false within the directives

-------------------------------------------------------------------------------
07.09.2006 17:35 (CEST), cms

  * Fix for an utterly strange bug in XML.Element's .toString() function. 
    libxml's root document pointer can only be moved lower down the document structure. 
    If it's moved down it can not move backwards up the structure again. 

    This function did just that, so some elements got lost on the way. Now they doesn't,
    as the new implementation doesn't move the root pointer at all.   

-------------------------------------------------------------------------------
07.09.2006 14:29 (CEST), cms

  * Fix for a segfault in the xml modules XML.TreeParser class, this segfault could happend at
    random. It was in the function recursive_namespace_copy() that didn't check to consistancy 
    of a value before using it. 

-------------------------------------------------------------------------------
31.08.2006 18:34 (CEST), cms

  * Fix for a segmentation fault when the xml modules xpath search 
    returns an emtpy result.


-------------------------------------------------------------------------------
31.08.2006 18:15 (CEST), cms

   * Added functions:
	xpathNode();
	xpathArray();
     to the XML.Element class. 
     These function works the same as the once in the XML.TreeParser class.

-------------------------------------------------------------------------------
23.05.2006 09:57 (BST), ctr

 * Fix for trying to compile in an empty file, when closing of the include
   ferite would free the last token, which, in an empty file doesn't exist.
 * Slight tweak to ferite scripts, it'll now store the back trace stack.

-------------------------------------------------------------------------------
21.05.2006 14:35 (BST), ctr

 * I have added a function .setWeakReference(boolean) to the Object class. This 
	means that the instance of Object wont retain a reference count and can be 
	assigned to a member of the wrapped object and they will be free'd correctly

-------------------------------------------------------------------------------
13.05.2006 14:16 (BST), ctr

	The raise keyword works now, it takes a single expression that should be an 
	error object
	The handle block can take an optional label to have as the error object name
	Fix for the serialize module and double encoding
	Warning if iferr and fix are used rather than the new monitor/handle keywords
-------------------------------------------------------------------------------
09.04.2006 13:16 (BST), ctr

  * Fix for f().blah which wouldn't work. Not spotted before because foo.f().blah
    would work.

-------------------------------------------------------------------------------
06.04.2006 09:28 (BST), ctr

  * Fix for serialize module and the boolean type.

-------------------------------------------------------------------------------
30.03.2006 16:32 (BST), ctr

  * Critical generational GC bug fixed.

-------------------------------------------------------------------------------
29.03.2006 10:30 (BST), ctr

  * An rmi fix, we can now happily send binary data over an rmi session

-------------------------------------------------------------------------------
28.03.2006 18:52 (BST), ctr

  * From ctr to cms. A boolean type.

-------------------------------------------------------------------------------
28.03.2006 17:04 (BST), ctr

  * Fix for a exception handler under-write

-------------------------------------------------------------------------------
19.03.2006 21:01 (GMT), ctr

  * __FILE__ and __LINE__ variables to allow you to use them in your code

-------------------------------------------------------------------------------
07.03.2006 12:04 (GMT), ctr

  * Added the ability to use types within directives

-------------------------------------------------------------------------------
15.02.2006 13:39 (CET), ctr

  * Fixed a double free with ferite_script_clean
  * Fixed an issue with non-thread safe ferite throwing warnings on compile
  * Added the keyword 'monitor' as an alternative keyword to 'iferr' which 
    we can all agree works more nicely

-------------------------------------------------------------------------------
09.02.2006 14:06 (GMT), ctr

  * A fix for the gc, this might be the problem where objects are remaining 
    within the GC. Infact. I am certain that this is the bug being fixed.

-------------------------------------------------------------------------------
09.02.2006 13:45 (GMT), ctr

  * Double free detection

-------------------------------------------------------------------------------
09.02.2006 11:22 (GMT), ctr

  * Memory allocation statistics in jedi - we can now see the distribution of
    memory allocated. I am going to use this to profile ferite programs to 
    try and best tune memory allocation based upon actually usage rather than
    a good 'guess'
    
  * Memory is now 4 byte (word) aligned. Before it was out by two. If memory
    is returned unaligned ferite will stop.

-------------------------------------------------------------------------------
07.02.2006 12:18 (UTC), cms

  * Make --with-pcre=<DIR> accually use the pcre-config in <DIR>, 
    also added --with-libxml2 so that one can specify the location of the libxml2 
    that one wants to compile against. 

-------------------------------------------------------------------------------
07.02.2006 12:12 (GMT), ctr

  * This should fix a bug within the ferite engine. It was a memory overwrite 
    issue. There is now code within the jedi memory manager to detect
    overwrites. 
    
  * There is also a bug fixed within src/ferite_execute.c which could be
    causing potential overwrites. The local variables were being deleted 
    before the stack. In days before Sys.exit(0) and Sys.error() the stack 
    would be clear, however, now it is not guaranteed. Therefore deleting
    local variables that may have been on the stack before the stack can 
    cause issues - especially if a deleted variables memory is re-used 
    before the stack is deleted.
 
    This should hopefully fix this issue.

-------------------------------------------------------------------------------
23.01.2006 10:28 (GMT), ctr

  * Directory.walk function

-------------------------------------------------------------------------------
14.01.2006 02:21 (GMT), ctr

  * A cleaner exec engine that should make things faster to execute

-------------------------------------------------------------------------------
14.01.2006 01:07 (GMT), ctr

  * A set of functions: ferite_script_attach_data, ferite_script_remove_data,
    ferite_script_fetch_data to allow you, as a developer, to attach keyed data 
    to script objects.
  * Added two more compiler functions that allow the passing of a script object
    to the compiler, this, combined with the afore mentioned functions allows
    the attachment of data *before* any code is compiled or executed.
-------------------------------------------------------------------------------
09.01.2006 11:11 (CET), cms

  * added a String.replace(); funcion.

  string orig = "You are a good person!";
  string new = orig.replace("good","bad");
  
-------------------------------------------------------------------------------
08.01.2006 22:43 (GMT), ctr

  * Make sure we actually quote strings when converting an array -> string

-------------------------------------------------------------------------------
06.01.2006 16:11 (GMT), ctr

  * CDATA on serialize-xml module for strings
  * Fix for ferite -- where not supplying a script would cause the command
    line program to crash

-------------------------------------------------------------------------------
03.01.2006 11:04 (GMT), ctr

  * Happy New Year! Update to 2006
  * Fix for an array.map bug that would not copy with multiple keys of the
    same name.

-------------------------------------------------------------------------------
02.01.2006 23:43 (GMT), ctr

  * Moved the eval fix for the compiler written ages ago over to include() for
    when the compiler is invoked within itself. Thanks goes to
    Noel Forbes <nforbes@cynigram.com>

-------------------------------------------------------------------------------
31.12.2005 10:25 (GMT), ctr

  * Fix for Linux with Aphex

-------------------------------------------------------------------------------
16.12.2005 11:51 (GMT), ctr

  * Fix for a memory free-bug in calling functions on disposable variables
    that aren't objects :)

-------------------------------------------------------------------------------
12.12.2005 19:01 (GMT), ctr

  * Fix for a c string formating bug found by daniel

-------------------------------------------------------------------------------
10.12.2005 11:53 (GMT), ctr

  * All refcount increments and decrements must be done using the FDECREF and
    FINCREF as they will soon be atomic operators on increment. This should
    fix a couple of threading issues.

-------------------------------------------------------------------------------
01.12.2005 10:57 (GMT), ctr

  * Fix for a daft serialize-xml bug

-------------------------------------------------------------------------------
25.11.2005 17:54 (GMT), ctr

  * The serialize module can now cope with namespaces and classes

-------------------------------------------------------------------------------
25.11.2005 17:32 (GMT), ctr

  * serialize-xml, this is an extension to the serialize module. As this 
    pulls in reflection, array, and the xml module, it has to be explicitly
    imported by calling "serialize-xml". It provides Serialize.fromXML();
  * Added Namespace.locate() to mirror the Class.locate() functions within
    the relfection module.

-------------------------------------------------------------------------------
21.11.2005 18:15 (GMT), ctr

 * Some fixes highlighted by the apple compiler

-------------------------------------------------------------------------------
18.11.2005 12:47 (GMT), ctr

  * Back port of a critical exception handler bug within itterating loops

-------------------------------------------------------------------------------
14.11.2005 14:52 (GMT), ctr

  * rmi fix for zero sized arrays

-------------------------------------------------------------------------------
11.11.2005 12:37 (GMT), ctr

  * The method_missing mechanism that works for objects and classes has now
    been enabled for namespaces. This allows you to do things like this:
    
      uses "console";
    
      function method_missing( ... ) {
          Console.println( arguments() );
      }
	     
      hurrah("wibble");
      
  * Clean up of the function invocation for toplevel functions

-------------------------------------------------------------------------------
09.11.2005 10:02 (GMT), ctr

  * Another slight refcounting bug fixed
  * Fix for feritedoc

-------------------------------------------------------------------------------
07.11.2005 16:38 (GMT), ctr

  * A fix to the array code that should help solve some issues. The array code
    would inflate the objects reference count causing it to stagnate within 
    the GC causing a memory leak.

-------------------------------------------------------------------------------
31.10.2005 12:40 (GMT), ctr

  * To aid memory release, the memory managers have now got access to the 
    script that calls them (or NULL otherwise). This allows them to invoke
    the garbage collector to free up more ram when it may be a requirement
    to grab it from the OS. This is a big change, and has caused the functons
    within ferite_stack.c, ferite_buffer.c, and a few other places to be
    changed to provide the script object. There is also a new define
    FE_NoScript that can be provided (just defined as NULL) when not script
    is availiable. This *should* be used where ever a script argument is
    required but can't be found.
    

-------------------------------------------------------------------------------
29.10.2005 23:20 (BST), ctr

  * Fix for ferite_hash_create, it was allocating 4x as much memory than was
    required. This means that each hash of size 32 was using ~600 bytes of 
    memory.This has been dropped to about 128 bytes.

-------------------------------------------------------------------------------
29.10.2005 21:54 (BST), ctr

  * The GC will be run in a thread every X number of ops since the last GC
    run. This should avoid object starvation.
  * The function ferite_buffer_to_var now takes the script in which to create
    the variable so as to use the variable cache.
  * The CACHE_SIZE has been reduced to 200 variables, and may be reduced 
    further in the future.

  The aim of these fixes is to remove a memory leak where variables would be
  created and then put into the ferite variable cache. However, because the
  cache was never checked, the cache would fill up and there would be a
  FE_CACHE_SIZE memory leak.
  
-------------------------------------------------------------------------------
28.10.2005 09:32 (BST), ctr

  * Fixed a bug where the rmi layer was choking the file descriptor chain.
    As a result I have introduced gc checking in the core listen function
    for rmi, as well as providing the option of manually checking the non
    blocking sockets.

-------------------------------------------------------------------------------
27.10.2005 15:48 (BST), ctr

  * Fix a naughty threading bug that would cause closing threads to clash
    and double free

-------------------------------------------------------------------------------
26.10.2005 15:36 (BST), ctr

  * Some fixes to RMI, it never really worked. Blast.

-------------------------------------------------------------------------------
26.08.2005 14:49 (BST), ctr

  * Stream.StdioStream will now throw exceptions on a socket read/write error
    this is the right way to handle the exceptions.


-------------------------------------------------------------------------------
25.08.2005 18:45 (BST), ctr

  * Fix for directives error'ing out and causing a segfault
  * Fix for eval to restore the jump point on a failed eval during invocation
    from compliation.

-------------------------------------------------------------------------------
24.08.2005 08:18 (BST), ctr

  * Removed requirement of () on empty arg function definition
  * Static constructors will only be called once on a class, when the 
    original class creation is executed.

-------------------------------------------------------------------------------
24.08.2005 05:29 (BST), ctr

  * Fix for a stupid directives clean up bug that would cause the compiler
    to crash if there was a parse error when there are directives about.


-------------------------------------------------------------------------------
15.08.2005 11:55 (BST), ctr

  * ferite can now accept multiple search paths for native modules

-------------------------------------------------------------------------------
14.08.2005 20:27 (BST), ctr

  * Removed the code for alias, rename and moved the code to directives

-------------------------------------------------------------------------------
26.06.2005 14:09 (BST), ctr

A fix for closure assignments.

objects assigned to a variable in a closure where getting an incorrect
refcount


-------------------------------------------------------------------------------
13.06.2005 15:40 (BST), ctr

  * Added an implementation of strptime for windows, may even use this for all
    implementations for consistency

-------------------------------------------------------------------------------
13.06.2005 13:07 (BST), ctr

  * Fix for a couple of bugs within the compiler that stops ferite crashing
    when the following code is executed: class F{} namespace modifies F{}

-------------------------------------------------------------------------------
12.06.2005 21:41 (BST), ctr

  * Ok, now closures can do multiple arguments

-------------------------------------------------------------------------------
12.06.2005 21:10 (BST), ctr

  * Fix to miniferite.c

-------------------------------------------------------------------------------
11.06.2005 18:22 (BST), ctr

  * With the enablement of basic-types-with-object-behavior, we now use the
    namespaces Array, String and Number for getting the functions.
    
    Functions that are to do with a specific number operation are now in
    the Number namespace

-------------------------------------------------------------------------------
11.06.2005 12:23 (CEST), ctr

  * Make directives use a [name values,value] notation
  * Added a directive keyword to tag a function as a directive
    e.g. directive access( string name ) {
         }
  * Removed the need to use the function keyword for constructor and 
    destructor.
  * Added variable arguments to closues
  * Added optional types to closure arguments e.g. closure( number x ) {  }
  * Directives now apply to namespaces as well as classes
  
-------------------------------------------------------------------------------
10.06.2005 17:52 (CEST), ctr
  
  * Initial work on class directives
  * Turned on basic-types-namespace by default
  * Start of work post-1.0
  
-------------------------------------------------------------------------------
10.06.2005 09:51 (CEST), ctr

  * Fix for exception handlers that should now work correctly when no else
    block is supplied.

-------------------------------------------------------------------------------
26.05.2005 10:51 (BST), ctr

  * GCC 4.0 cleanups for the thread and xml module

-------------------------------------------------------------------------------
25.05.2005 14:02 (BST), ctr

  * Fix the images

-------------------------------------------------------------------------------
25.05.2005 11:01 (BST), ctr

  * Fix to a couple of bugs in builder that caused Makefile.am and config.m4
    not to be created
  * Fix to the pdf generator for manual-builder that caused the wrong
    characters to appear with < >, escaped them on the html generator
  * Fixed the issue with CDATA in the xml documents not appearing in the final
    documents.
  * Finished updating the embed guide, it still isn't great but there is
    enough there to get people started.
    
  I think we are just about ready for 1.0rc1.

-------------------------------------------------------------------------------
27.04.2005 12:04 (BST), ctr

 * Some more fixes to remove the warnings in the code WRT previous changelog

-------------------------------------------------------------------------------
27.04.2005 09:57 (BST), ctr

  * A sligh structure change that shouldn't make any difference to compile or
    writing of code. It simply adds FeriteClass *.cval and FeriteNamespace
    *.nval to the FeriteVariable structure's union and updated VAC() and 
    VAN(). This is to fix a gcc3 warning and a gcc4 error. Thanks to Mike for
    the heads up.

-------------------------------------------------------------------------------
19.04.2005 16:31 (BST), ctr

  * Added set-property and add-property to target build settings.
  * Added platform="Darwin" to allow per platform specifics

-------------------------------------------------------------------------------
05.04.2005 09:28 (BST), ctr

  * Various cleanups to source documentation

-------------------------------------------------------------------------------
13.03.2005 12:26 (GMT), ctr

 * It was suggested that the Date and Alarm foo in posix was bad form and 
   should be moved to a separate module. So they have.

-------------------------------------------------------------------------------
13.03.2005 11:48 (GMT), ctr

 * RMI wont have a test suite. By decree of me. (Atleast not for ferite 1.0)

-------------------------------------------------------------------------------
07.03.2005 15:40 (GMT), ctr
  
  * Fix for filesystem on solaris
  * Fix for Sys.env on solaris, so that it works :D

-------------------------------------------------------------------------------
04.03.2005 07:45 (GMT), ctr

  * feritedoc will now deal with <keyword /> and <type /> tags within examples
    and strings. This leads to a better approach for if, we, might want to 
    generate pdfs from the source code.

-------------------------------------------------------------------------------
03.03.2005 10:16 (GMT), ctr

  * feritedoc now supports @implements, @protocol
  * feritedoc now has some nice icons that I, er, borrowed and modified from 
    the eclipse project.

-------------------------------------------------------------------------------
03.03.2005 00:24 (GMT), ctr

  * RMI will now re-use existing connections for new services. This means that
    3 services on the same server/protocol/translation/transport will use the
    same connection.

-------------------------------------------------------------------------------
02.03.2005 19:26 (GMT), ctr

  * Ok, should have really have fixed the ferite threading stuff now. We shall
    wait and see. The main problem is the ordering of cleaning up threading
    information.

-------------------------------------------------------------------------------
02.03.2005 16:16 (GMT), ctr
  
  * Found another slight threading bug, I think this is the correct solution

-------------------------------------------------------------------------------
02.03.2005 15:23 (GMT), ctr

  * Fixed a very complicated but subtle bug that spanned the thread module and
    the contents of the generational GC and the thread code within the engine.
    The bug was seen as massive memory corruption and leakage. The thread 
    module correctly cleans up a thread and can cope with threads that are both
    referenced and on their own.

-------------------------------------------------------------------------------
02.03.2005 ??:31 (GMT), ctr

  * Fixed a leak when using the bind() and connect() method calls for the 
    various network sockets.

-------------------------------------------------------------------------------
02.03.2005 09:31 (GMT), ctr

  * A couple of memory leaks in the Posix.select() call
  * A significant amount of work on threading and memory issues
  * The GC is now locked

-------------------------------------------------------------------------------
01.03.2005 16:38 (GMT), ctr

  * Some critical trhreading bugs have been resolved. Thread grouping would not
    wait for all threas to finish and would miss the first created thread. This
    wasn't picked up on until last night when I noticed the thread_pool being
    deleted when I knew there was a thread left.
  * The threads in rmi have been written so as to not block
  * Fixed a memory leak in the scanner that would cause the leak of a buffer 
    when parsing .fec files
    
-------------------------------------------------------------------------------
01.03.2005 12:08 (GMT), ctr

  * Work on the rmi module, it is now more operable in the grand scheme of 
    things :)
  * Some tweaks to the thread module, this still needs more work. I think I 
    might have to introduce locking to the GC :(

-------------------------------------------------------------------------------
28.02.2005 16:05 (GMT), ctr

  * Fixed it so that xml nodes can't be made siblings of root nodes (not allowed)
  * addChild() doesn't cause incorrect hookup of namespaces (it was using the
    wrong parent namespace)
  * Fixed critical memory bug in the xpath code within the XML.Element object
    which caused it to overwrite memory it didn't own.
  * test-suite/xml.fe is now mostly up to date.
  * Fixed File.create to take a block aswell as have a default mode version of
    the function much like File.open
  * Fixed a memory leak in the get*() methods in XML.Element
  * Removed XML.TreeParser.pedantic because it is a waste of time
  * Fixed error reporting for parsers so they are useful, need to make thread 
    safe.
    
-------------------------------------------------------------------------------
27.02.2005 20:39 (GMT), ctr

 * Fixes to the unix module to make sure that unix stream works
 * unix.fe test script. This igores the main syslog commands because I don't
   want to flood people's syslogs.

-------------------------------------------------------------------------------
20.02.2005 10:30 (GMT), ctr

 * Some clean ups and changes to the date functions. This is to make them 
   easier on the eyes and more ferite.
   
   I have renamed Posix.Tm to Posix.Date
   
   I have renamed:
   
        Posix.time() to Posix.Date.now()
        Posix.strptime() to Posix.Date.parse()
        Posix.localtime() to Posix.Date.localDate()
        Posix.gmtime() to Posix.Date.date()
        Posix.Tm.mktime() to Posix.Date.time()
        Posix.Tm.asctime() to Posix.Date.toString()
        Posix.Tm.strftime() to Posix.Date.format()

 * Fixed a bug to run the results of strptime through gmtime/localtime on OSX
   otherwise you end up with an incorrect date.
   
-------------------------------------------------------------------------------
10.02.2005 08:30 (GMT), ctr
  
  * Added 'farm' - the ferite build system
  * Fixed to the xml module to be correct for getElementData()

-------------------------------------------------------------------------------
21.01.2005 11:17 (GMT), ctr

 * IPC clean ups and fixes.
 * ipc.fe test suite
 * test framework will now force a gc invocation after each test function 
   called. This means that objects created in a test should be cleaned up 
   once done.
-------------------------------------------------------------------------------
21.01.2005 09:02 (GMT), ctr

 * Thread test suite.
 * Fixes for the aphex portion of the thread safe event signalling. There was
   a set of mutex locks that simply were not needed (I suspect it was due to
   various examples on the web using mutex lock before and after some code
   for signal/wait)
 * Slight clean up of thread api.
 
-------------------------------------------------------------------------------
20.01.2005 16:41 (GMT), ctr

 * Fix for Regexp.split() to work correctly
 * Fix for the slicing operator to actually work with negative indices
   (we needed signed ints, but size_t != signed)
 * Regexp test-suite script

-------------------------------------------------------------------------------
20.01.2005 15:15 (GMT), ctr

  * Network layer is now cleaner and nicer. UDP is now stream based (and 
    working now)
  * network.fe is now correct and functional.

-------------------------------------------------------------------------------
20.01.2005 10:44 (GMT), ctr

 * Decided to start having a thiner ChangeLog
	
--------------------------------------------------------------------------------------------------------
20.01.2005 10:37 (GMT), ctr

  * Fixed a bug in the executor that would cause a double free on a variable where a temporary variable 
    (marked as DISPOSABLE) was passed to a function accepting a variable by reference. A variable inside
    the engine is usually disposable when there is no hook for it in a visible program variable such as:

    function f( object &g ) {
    	     Console.println( g );
    }

    f( new SomeObject() );

    The execution of this code causes the object to be deleted at the end of the Console.println call.
    Byref makes no sense here so the executor will now pass by value.

--------------------------------------------------------------------------------------------------------
18.01.2005 12:52 (GMT), ctr

 * Changes to the network layer to make it much more clean and tidy.
 * Fix for ferite_module.c that couldn't load a .fe[hc]? file in a relative 
   directory such as "../Includes/Template" etc.

--------------------------------------------------------------------------------------------------------
17.01.2005 09:06 (GMT), ctr

  * Removed the inet_aton/ipHostToNumber because I don't see what use they are. (just commented out).
    If someone wants them, they can come back but they seem of little use at the moment.
  * Added Network.getHostByName()
  * Bound network sockets no longer clutter up a port once they have been closed.
  * Network test-suite
  
--------------------------------------------------------------------------------------------------------
16.01.2005 15:23 (GMT), ctr

  * Move the Stream.StdioStream class from using the f* functions to operating on normal file 
    descriptiors.
  * Removed the __read__, __write__, and __close__ from File, and Network.TCPStream.

--------------------------------------------------------------------------------------------------------
16.01.2005 13:03 (GMT), ctr

 * Fixed Stream.ungetc to actually do what is expected.
 * Stream now reads Stream.EndOfLine to get the default end of line for newly created Stream.
 * Completed stream.fe unit test.
 * Renamed all Endofline to EndOfLine
 * New namespace function ferite_find_namespace_element_contents
 
--------------------------------------------------------------------------------------------------------
15.01.2005 17:19 (GMT), ctr

 * Fix to a number of very small, but sublte bugs in the stream layer that would cause bogus output 
   from .readln() and friends who use the input buffer. It is now critical that when you check for 
   .eos() within a sub class you also check super.eos() to make sure that the input buffer is empty
   aswell. It is also critical that if you change the position within the stream you call the 
   protected method clearInputBuffer() from your subclass, or stream_clear_input() within your C
   code. This clears the buffer and causes the stream layer to force a re-read. 
 * Start of a stream unit test

--------------------------------------------------------------------------------------------------------
15.01.2005 12:22 (GMT), ctr

  * Fix for Sys.timestamp()
  * More work on the test-suite. A function returns Test.SUCCESS on success, and Test.IGNORE for 
    you are ignoring. IGNORE is there for functions you can't test but you want to show that they
    have been considered, such as Sys.exit() and Math.rand().
  * scripts/test-suite/sys.fe complete
  
--------------------------------------------------------------------------------------------------------
13.01.2005 10:29 (GMT), ctr

 * Added an emacs major mode from Michael (with a few fixes etc from myself)
 
--------------------------------------------------------------------------------------------------------
12.01.2005 23:56 (GMT), ctr

 * Fix for iferr {} without an else block. The executor wouldn't reset the exception handler location
   causing an old exception handler that was out of scope to pick up the reigns.
 * Changed the apis for Serialize because they were broken.
 * Made the toXML output far more co-herent than before and ectually useable.
 * Serialise test suite
 * A number of memory leak fixes if errors occured when serialising
 * XML TreeParser will now throw an exception if the file or chunk were not parsed correctly. 

--------------------------------------------------------------------------------------------------------
12.01.2005 13:07 (GMT), ctr

 * More work on reflection module, better namespace support
 * Fixes to the manual and feritedoc manual from Michael

--------------------------------------------------------------------------------------------------------
08.01.2005 19:36 (GMT), ctr

 * Reflection fix for get variables
 * Fix for function exec, pass on the yield block
 * Added FENS_PARENT_NS to find the parent ns of something within the mainns
 * Fixed for namespaces within the Function object
 * various functions to make the different reflection classes more consistent, including a Namespace 
   class
--------------------------------------------------------------------------------------------------------
08.01.2005 18:08 (GMT), ctr

 * Better number 'equals comparison'

--------------------------------------------------------------------------------------------------------
08.01.2005 03:56 (GMT), ctr

 * Lets be good with doubles

--------------------------------------------------------------------------------------------------------
07.01.2005 08:18 (GMT), ctr

 * Various fixes and cleanups to test and filesystem
 * Unit tests for filesystem

--------------------------------------------------------------------------------------------------------
06.01.2005 12:46 (GMT), ctr

 * test-suite updates, hopefully bringing it up to date
 * A bug in array comparison fixed, ferite didn't check for keys 

--------------------------------------------------------------------------------------------------------
05.01.2005 16:56 (GMT), ctr

 * move the unix network stuff from network to unix

--------------------------------------------------------------------------------------------------------
05.01.2005 12:08 (GMT), ctr

 * More breakage, we now have a filesystem module, for uh, cross platform file stuff

--------------------------------------------------------------------------------------------------------
04.01.2005 16:53 (GMT), ctr

 * Fix for bugs in the compiler for class modification and modifying non existant classes

--------------------------------------------------------------------------------------------------------
04.01.2005 10:59 (GMT), ctr

 * And here we have the modules. For the moment, sys will load the other modules

--------------------------------------------------------------------------------------------------------
04.01.2005 08:49 (GMT), ctr

 * A couple of patches from Michael for feritedoc
 * A better documentation generation script which can cope much better with more .sgml sources.
 * A feritedoc.sgml and feritedoc.pdf to read and enjoy.

There will be some more life destroying soul tarring fun later on. Once I commit
the unix, network, posix, stream and new sys module.

--------------------------------------------------------------------------------------------------------
03.01.2005 10:17 (GMT), ctr

 * More win32 fixes.

--------------------------------------------------------------------------------------------------------
02.01.2005 22:33 (GMT), ctr

 Update Copyright String

--------------------------------------------------------------------------------------------------------
02.01.2005 22:29 (GMT), ctr

 * Various windows fixes, thought I'd try and get it working for the 1.0 release

--------------------------------------------------------------------------------------------------------
17.12.2004 16:06 (GMT), ctr

 * Fix for serialize module. If there was a zero length serialized string, it would cause a large
   amount of the serial buffer to be used by it.

--------------------------------------------------------------------------------------------------------
17.12.2004 10:05 (GMT), ctr

 * Fix a double free when you include a script that has nothing in it.
 * Fix for build_c_api_doc.sh for multiple platforms

--------------------------------------------------------------------------------------------------------
16.12.2004 11:17 (GMT), ctr

 * Slightly better error reporting from feritedoc. It will also output an information box about the
   documentation

--------------------------------------------------------------------------------------------------------
15.12.2004 23:18 (GMT), ctr

 * Add classes, namespaces, groups and variables to the search index
 * Pay attention to the @warning attribute

--------------------------------------------------------------------------------------------------------
14.12.2004 12:06 (GMT), ctr

 * Fix for documentation

--------------------------------------------------------------------------------------------------------
13.12.2004 19:42 (GMT), ctr

 * Updates to reflection, rmi, regexp, thread and xml documentation
 * Various script fixes

--------------------------------------------------------------------------------------------------------
13.12.2004 14:56 (GMT), ctr

 * Array,Console,IPC,Reflection and String documentation changes

--------------------------------------------------------------------------------------------------------
13.12.2004 11:07 (GMT), ctr

 * Start of a javascript search engine on the documentation

--------------------------------------------------------------------------------------------------------
13.12.2004 09:51 (GMT), ctr

 * The capi docs will now build correctly

--------------------------------------------------------------------------------------------------------
13.12.2004 09:35 (GMT), ctr

 * Fix some comments markers in posix.fec

--------------------------------------------------------------------------------------------------------
12.12.2004 18:11 (GMT), ctr

 * Added some scripts to get config information

--------------------------------------------------------------------------------------------------------
12.12.2004 13:34 (GMT), ctr

 * A script to aid creating nice looking examples
 * Change to the way documentation is done - we now use @ rather than ! for sections.
   This is to make the parser less complicated and allow us to have more complete examples.
 * Updated all source code to use the new scheme
 * Loads of tweaks and changes to the output of feritedoc to make it easier to follow.

--------------------------------------------------------------------------------------------------------
12.12.2004 12:40 (GMT), ctr

 * Updated 'array' documentation
 * Added closure support to Array.sort()
 * Improved feritedoc output - sorted items

--------------------------------------------------------------------------------------------------------
11.12.2004 15:04 (GMT), ctr

 * Memory leak fix
 * Fix for feritedoc
 * Added a slight undocumented tweak tothe runtime. See naughty.fe, to enable compile with
   --enable-debug (to the configure script)

--------------------------------------------------------------------------------------------------------
08.12.2004 08:02 (GMT), ctr

 * Some fixes to the compiler for warning generation
 * By default the command line tool will show warnings

--------------------------------------------------------------------------------------------------------
07.12.2004 13:43 (GMT), ctr

 * Various teask and improvements to feritedoc
 * When ferite can't find a function it will say so and give the parameters passed

--------------------------------------------------------------------------------------------------------
07.12.2004 10:26 (GMT), ctr

 * Ok, no migration script, but this is what you should do before you install this version of ferite:

	move $prefix/lib/ferite/native     to $prefix/lib/ferite/module-native
        move $prefix/lib/ferite/*.fec      to $prefix/lib/ferite/module-source
	move $prefix/lib/ferite/examples   to $prefix/share/doc/ferite/
   	move $prefix/lib/ferite/test-suite to $prefix/share/doc/ferite/
	
   This will mean the the system works correctly

--------------------------------------------------------------------------------------------------------
07.12.2004 10:21 (GMT), ctr

 * Changed path names again, native -> module-native, platform-independant -> module-source

--------------------------------------------------------------------------------------------------------
06.12.2004 21:14 (GMT), ctr

 * Added .feh as a valid library extension
 * Fixed install paths for the various documents.
 * Changed install path for the example scripts.
 * C API documentation also gets generated and installed now.
 * Moved cross platform .fec files to $prefix/lib/ferite/platform-independant
 * Fix for the xml module which would cause a crash if .getFirstChild() and friends where called
   and there was no child.
 * libxml2 is now a requirement for ferite, this makes writing tools much easier to do.
 * When you do a make install, the doc directory will build the capi documentation
 * feritedoc --regenerate will rebuild the documentation based upon module descriptions.
 * Module descriptions for the core modules.

--------------------------------------------------------------------------------------------------------
04.12.2004 17:58 (GMT), ctr

 * A fix for absolute_to_relative for script namesd
 * module descriptors

--------------------------------------------------------------------------------------------------------
04.12.2004 00:00 (GMT), ctr

 * rmi documentation

--------------------------------------------------------------------------------------------------------
03.12.2004 22:08 (GMT), ctr

 * Much faster feritedoc

--------------------------------------------------------------------------------------------------------
03.12.2004 12:04 (GMT), ctr

 * Fixed a segfault bug in the reflection module
 * Updated rmi to work with the new regexp modules

--------------------------------------------------------------------------------------------------------
03.12.2004 10:51 (GMT), ctr

 * Some fixes to the compiler
 * Some email address changes
 * Added an updated (and working) ferite cgi code from Daniel

--------------------------------------------------------------------------------------------------------
01.12.2004 16:02 (GMT), ctr

 * Fix for a nasty bug with closures that got introduced a while back
 * Fixed regepxs with strings passed to them for replacement with backslashes in the that aren't back 
   ticks.

--------------------------------------------------------------------------------------------------------
01.12.2004 15:19 (GMT), ctr

 * Fix for a nasty bug that made a script such as this to crash ferite:

	uses "array", "console";

	namespace i {
		function test() {
			return [ "bar" ];
		}
	}

	string resString = i.test()[0];
	Console.println( resString );

--------------------------------------------------------------------------------------------------------
01.12.2004 12:06 (GMT), ctr

 * Applied mdh's documentation patch
 * Fixed the const.sh issue in the dist build
 * Removed \b as an escape character within strings to avoid confusion
 * Final classes can't be modified
 * Some more verbose error messages

--------------------------------------------------------------------------------------------------------
01.12.2004 11:55 (GMT), ctr

 * A fix for assigning to null and nowt

--------------------------------------------------------------------------------------------------------
19.11.2004 14:41 (GMT), ctr

 * Documentation additions:
    - added variable declaration from within a for loop
    - various minor changes
 * Compiler fixes:
    - fix for variables declared within a for loop (stops a bus error)
    - fix for void variables declared within a loop's block, they are now correctly reset on each
      block itteration.
 * Runtime issues:
    - fix for a memory leak in the changed function code for overloading
    - it is now possible to check if two classes, namespaces or void variables are equal
    
 Thanks to Michael D Henderson for the heads up.
--------------------------------------------------------------------------------------------------------
29.10.2004 11:06 (BST), ctr

 * It is now possible to embed /* */ comments inside themselves

--------------------------------------------------------------------------------------------------------
24.10.2004 16:41 (CEST), cms

  * Added documentation to the XML module.

--------------------------------------------------------------------------------------------------------
24.10.2004 14:37 (BST), ctr

 * The manual should not tehoretically be complete for this version

--------------------------------------------------------------------------------------------------------
11.09.2004 15:00 (BST), ctr

 * Apply the parent namespace to the nodes below if the added node doesn't have one (xml)

--------------------------------------------------------------------------------------------------------
09.09.2004 15:28 (BST), ctr

 * Fix a slight inheritence quirk with calling super

--------------------------------------------------------------------------------------------------------
09.09.2004 15:02 (BST), ctr

 * Some fixes to the serialize module

--------------------------------------------------------------------------------------------------------
09.09.2004 10:55 (BST), ctr

 * Some xml fixes
 * Added String.base64encode()
	     String.base64decode()

--------------------------------------------------------------------------------------------------------
07.09.2004 15:50 (BST), ctr

 * Added another script to test for the bug in previous commit: odd_overloading.fe

--------------------------------------------------------------------------------------------------------
07.09.2004 15:43 (BST), ctr

 * fixes a bug where functions of different signatures in different classes could not be found.

   e.g.

   class A {
        function F( string hi )
	   Console.println( hi );
   }
   class B extends A {
	funciton F()
	   Console.println( "Boo" );
   }
   object o = new B();
   o.F( "Hello World" );
 
 * Some internal executor clean ups

--------------------------------------------------------------------------------------------------------
07.09.2004 10:43 (BST), ctr

 * Add the name of the attributes to the array of returned attributes in getAttributes()

--------------------------------------------------------------------------------------------------------
06.09.2004 22:23 (CEST), cms

  * Some more work on the XML module.

   Added functions for merging tree's

   mergeAsChild()
   mergeAsSibling()
   mergeAsNextSibling()
   mergeAsPreviousSibling()

--------------------------------------------------------------------------------------------------------
06.09.2004 21:29 (CEST), cms

  * Some more work on the XML module.

   Added functions for removing elements from the tree.

   removeElementsByTagName()
   removeChildren()
   removeChildWithName()
   removeSelf()

--------------------------------------------------------------------------------------------------------
06.09.2004 19:40 (BST), ctr

 * Fix for alias

--------------------------------------------------------------------------------------------------------
06.09.2004 19:21 (BST), ctr

 * Add a default constructor to the base class

--------------------------------------------------------------------------------------------------------
06.09.2004 14:06 (BST), ctr

 * Fix an odd bug in creating objects. It would look in the wrong object for a function when no 
   constructor was found

--------------------------------------------------------------------------------------------------------
06.09.2004 01:41 (BST), ctr

  * Some more work on xml module: addNextSibling, addPreviousSibling, getNamespace

--------------------------------------------------------------------------------------------------------
05.09.2004 19:08 (CEST), cms

  * More XML module work.

   Added functions for manipulating the tree. 

   Added:

     hasAttribute()
     addChild()
     addSibling()
     addComment()
     addCDATASection()
     addPI()
     setElementName()
     setElementData()
     setAttribute()
     removeAttribute()

--------------------------------------------------------------------------------------------------------
05.09.2004 16:38 (CEST), cms

  * Alot more work on the XML module to make the tree parser functional. 
    Its now possible to navigate in the tree and extract Element/attribute data.

   Added:
     getDocumentElement()
     xpathNode()

    class XML.Element which is a container for an XML element.

    getElementName()
    getElementData()
    getElementsByTagName()
    hasAttributes()
    getAttributeByName()
    getAttributes()
    hasChildren()
    getChildren()
    getFirstChild()
    getLastChild()
    getParent()
    getpreviousSibling()
    getNextSibling()

    A module-deinit {} section which makes sure that all global variables in libxml2 gets free()'ed.
	
    Documentation is missing.

  Renamed:
    
    keep_blanks to keepBlanks
	
--------------------------------------------------------------------------------------------------------
03.09.2004 19:02 (BST), ctr

  * A little optimisation in super()
  * Added self() which will call the constructor in the current object

--------------------------------------------------------------------------------------------------------
03.09.2004 09:43 (BST), ctr

 * Fixed some xml error reporting problems
 * Moved xml items into an XML namespace

--------------------------------------------------------------------------------------------------------
02.09.2004 23:39 (BST), ctr

 * Remove some commenting in regexp
 * Fix xml documentation

--------------------------------------------------------------------------------------------------------
02.09.2004 12:00 (BST), ctr

 * Fixed a bug in the system to stop native static constructors crashing builder

--------------------------------------------------------------------------------------------------------
01.09.2004 22:43 (BST), ctr

 * rename of Constructor and Destructor to constructor and destructor
 * you can use class and namespace as declaration for functions

--------------------------------------------------------------------------------------------------------
30.08.2004 14:54 (BST), ctr

 * Fix for builder with aliased functions
 * Moved classes to using constructor rather than there name for the name of the constructor e.g.

	class A {               is now:         class A {
		function A(){							function constructor(){
			...										...
		}										}
	}										}

 * More documentation

--------------------------------------------------------------------------------------------------------
20.08.2004 16:19 (BST), ctr

 * Docs directory clean up
 * More documentation work

--------------------------------------------------------------------------------------------------------
20.08.2004 11:44 (BST), ctr

 * A change to ferite_compile.c and serialize.fec for variable ordering for gcc 2.95
 * Some more docs about closures

--------------------------------------------------------------------------------------------------------
17.08.2004 10:49 (BST), ctr

  * Another change to builder to reduce name conflicts.

    It is advised you rebuild your modules but is not necessary to do so.

--------------------------------------------------------------------------------------------------------
17.08.2004 10:07 (BST), ctr

 * Slight compiler change
 * A makefile change
 * More documentation

--------------------------------------------------------------------------------------------------------
15.08.2004 12:10 (BST), ctr

  * A change to the parser to allow type hints syntax
  * Fix to resizing an array

--------------------------------------------------------------------------------------------------------
15.08.2004 11:26 (BST), ctr

 * Start of a slight security code for restricting a module load

--------------------------------------------------------------------------------------------------------
02.08.2004 12:48 (BST), ctr

 * Last change. key => value in array constructs, the : was not obvious enough

--------------------------------------------------------------------------------------------------------
02.08.2004 09:24 (BST), ctr

  * Slight change in array syntax. [ 'key': value ]

--------------------------------------------------------------------------------------------------------
01.08.2004 17:06 (BST), ctr

  * Ability to setup assoc array elements. [ value => "key" ]
  * Changed the output of array to string to output to the same format as the syntax

--------------------------------------------------------------------------------------------------------
27.07.2004 15:39 (BST), ctr

 * Serialize can now pack and unpack any variable type (just required a slight change)

--------------------------------------------------------------------------------------------------------
25.07.2004 13:45 (BST), ctr

 * Fixes and a script for the serialize module
 * Remove some tat from array.fec and add Array.last() to get the last element
 * A function String.lines() to allow easy traversing through lines within a string
 
--------------------------------------------------------------------------------------------------------
21.07.2004 17:56 (BST), ctr

 * Rename saxparser to SAXParser and treeparser to TreeParser

--------------------------------------------------------------------------------------------------------
20.07.2004 11:59 (BST), ctr

 * Some more fixes to separate classes static and non static data

--------------------------------------------------------------------------------------------------------
19.07.2004 23:07 (BST), ctr

 * Internal changes to separate global data and code to aid script duplication

--------------------------------------------------------------------------------------------------------
19.07.2004 10:10 (BST), ctr

 * Fix for duplicate variables in the same scope with the same name
 * Rename the name_init, name_deinit et al to ferite_name_init et al. You will
   need to re-compile all modules. Easiest way is to touch the .fec files and
   just make.
 
--------------------------------------------------------------------------------------------------------
17.07.2004 13:37 (BST), ctr

 * A temporary fix for private/protected access to items withing a closure. They can only be accessed
   through the 'self' variable.

   This needs to be done more correctly, but this should solve the imediate
   problem.

--------------------------------------------------------------------------------------------------------
17.07.2004 12:06 (BST), ctr

 * Fix for closures in namespaces - ferite couldn't find them
 * Fix for including files - they can now be expressed relative to the file they are being included
   from not the cwd (both 'uses' and 'include') 
 * Fix for including an empty file, before it'd cause a memory error

--------------------------------------------------------------------------------------------------------
15.06.2004 13:35 (BST), ctr

 * More work on the documentation
 * Changed the version number

--------------------------------------------------------------------------------------------------------
14.06.2004 15:19 (BST), ctr

 * Update to feritedoc, it now works albeit slowly
 * Added <code></code> tags to allow for examples to be given
 * Documented the Regexp modules
 
--------------------------------------------------------------------------------------------------------
14.06.2004 12:04 (BST), ctr

 * Remove foreach, with closures we can do it more cleanly

--------------------------------------------------------------------------------------------------------
02.06.2004 13:42 (BST), ctr

 * Fix for closures being used with an object

--------------------------------------------------------------------------------------------------------
15.04.2004 14:54 (CEST), cms

  * make generate-module work again

--------------------------------------------------------------------------------------------------------
15.04.2004 12:23 (CEST), cms

  * Update Getoptlong to new regexp syntax.

--------------------------------------------------------------------------------------------------------
25.03.2004 18:45 (GMT), ctr

 * cms and his bug hunting antics! fix for functions with var_args

--------------------------------------------------------------------------------------------------------
19.03.2004 12:19 (GMT), ctr

 * Fix for string .postTrim() 

--------------------------------------------------------------------------------------------------------
17.03.2004 13:39 (GMT), ctr

  * Fix that stops protocols being instantiated or inherited from
  * Fix that stops a class implementing a non-protocol

--------------------------------------------------------------------------------------------------------
17.03.2004 11:46 (GMT), ctr

 * A fix for slicing arrays

--------------------------------------------------------------------------------------------------------
14.03.2004 15:52 (GMT), ctr

  * Finally protocols are sorted, see scripts/test/implements.fe
  * Changed it such that modifing an existing class wont allow you to define a new variable

--------------------------------------------------------------------------------------------------------
28.01.2004 16:20 (MST), firechipmunk
    * Added Build Date string to Ferite and Builder's version outputs
    * Added Function: Sys.getBuildDate()

--------------------------------------------------------------------------------------------------------
25.01.2004 03:29 (MST), firechipmunk
 * Port Ferite to NetBSD-Current

--------------------------------------------------------------------------------------------------------
10.01.2004 09:33 (GMT), ctr

  * A few changes and a syntax file set for Xcode

--------------------------------------------------------------------------------------------------------
03.01.2004 20:53 (CET), cms

  * Extended the serilize module, so that it executes the member functions serializeSleep(),serializeWakeup()
    if exsisting whenever serialization/unserialization is done so that its possible to do cleanups and initialisation.

--------------------------------------------------------------------------------------------------------
01.01.2004 10:42 (GMT), ctr

  * Happy New Year! I have updated all copyright strings to read -2004

--------------------------------------------------------------------------------------------------------
23.12.2003 13:01 (GMT), ctr

  * Backticks now work on replacement

--------------------------------------------------------------------------------------------------------
21.12.2003 00:19 (GMT), ctr

  * More regexp work - replace and replaceAll all work. Just need to implement the back ticks

--------------------------------------------------------------------------------------------------------
19.12.2003 13:12 (GMT), ctr

  * Rename of keywords:

	yield => deliver
	yieldblock => recipient
	with => using
	lambda => closure

    These make it more in the tune of ferite making it (hopefully) more obvious
  * Update to the syntax files
  
--------------------------------------------------------------------------------------------------------
19.12.2003 10:18 (GMT), ctr

  * Fix 'self' . behavior in namespaces and classes

--------------------------------------------------------------------------------------------------------
19.12.2003 09:24 (GMT), ctr

  * Remove some variables from the regex code that were unused 

--------------------------------------------------------------------------------------------------------
17.12.2003 13:07 (GMT), ctr

  * Closure are now correctly implemented. I had made a mistake before but now those are fixed

--------------------------------------------------------------------------------------------------------
17.12.2003 12:32 (GMT), ctr

  * Implemented call-by-reference for values aswell as the existing call-by-value. See 
    scripts/test/byref.fe for an example. This is so that I can implemented correct closures rather
    than the incorrect ones that exist at the minute so I decided to open it up to the programmers :)

--------------------------------------------------------------------------------------------------------
16.12.2003 17:45 (GMT), ctr

  * A couple of memory leak fixes

--------------------------------------------------------------------------------------------------------
16.12.2003 15:05 (GMT), ctr

  * Removed regexp's from the core
  * Replaced it with the regexp module

--------------------------------------------------------------------------------------------------------
15.12.2003 21:17 (GMT), ctr

  * Another example showing how useful closures are - a 5 line implementation of foreach

--------------------------------------------------------------------------------------------------------
15.12.2003 17:36 (GMT), ctr

  * Add auto-preload into the comand line program
  * Fixed aphex on Linux

--------------------------------------------------------------------------------------------------------
15.12.2003 10:01 (MST), FireChipmunk
  * Fixed aphex_threads on FreeBSD-Current
  * Created USING_FAKE_RECURSIVE_MUTEX in aphex.h for use by Darwin, Cygwin and Solaris.

--------------------------------------------------------------------------------------------------------
15.12.2003 16:32 (GMT), ctr

  * Renamed getArgs() to arguments() as the later is cleaner than the former
  * Added yieldblock() to get the block that is passed into the function. null if it doesn't exist
  * Added the ability to pass the current block on by going: foo() with yieldblock();
  * Updated modules
  * Added regexp module skeleton

--------------------------------------------------------------------------------------------------------
15.12.2003 12:58 (GMT), ctr

  * Made it possible to invoke methods on expressions. You just have to bracket them :)

--------------------------------------------------------------------------------------------------------
15.12.2003 10:36 (GMT), ctr

  * Fix for an aphex bug that caused a fubar in relative to absolute path conversion which contained a
    //

--------------------------------------------------------------------------------------------------------
15.12.2003 08:56 (GMT), ctr

  * Added yield (well, if we are going to borrow from another language we can atleast do it properly)
  * Some changes to the static binding to remove the need to pass in classes and namespaces

--------------------------------------------------------------------------------------------------------
15.12.2003 07:38 (GMT), ctr

  * Added 'with' keyword to allow a much more natural (Ruby;) way of passing in blocks to methods

--------------------------------------------------------------------------------------------------------
14.12.2003 17:57 (GMT), ctr

  * Added the ability to pass parameters into the closure
  * Added scripts/test/closure_params.fe to show how the above works

--------------------------------------------------------------------------------------------------------
14.12.2003 17:50 (CET), cms

  * Fixed a segmentation fault in the serialize module (when having object in objects).

--------------------------------------------------------------------------------------------------------
14.12.2003 10:28 (GMT), ctr

* Implementation of lambda, see closure.fe for an example. These are statically bound closures that can
  be passed around the ferite system as objects. The next thing to implement is passing in of vars. 
  These will be all void so that the closure can remain polymorphic (the most useful form of lambda)
* I also made some compile fixes
* Some patches from chip

--------------------------------------------------------------------------------------------------------
28.05.2003 10:13 (BST), ctr

  * A couple of fixes highlighted by "Strelnikov Michael" <strelnikov@cs.vsu.ru>

--------------------------------------------------------------------------------------------------------
21.05.2003 23:21 (BST), ctr

  * A couple of tweaks

--------------------------------------------------------------------------------------------------------
09.05.2003 11:40 (BST), ctr

  * Slight tweak for some future modifications

--------------------------------------------------------------------------------------------------------
06.05.2003 10:59 (BST), ctr

  * More windows work

--------------------------------------------------------------------------------------------------------
05.05.2003 13:13 (BST), ctr

  * A number of fixes for native ferite on windows

--------------------------------------------------------------------------------------------------------
03.05.2003 13:56 (BST), ctr

  * Slight fix for parsing regular expressions
  * ferite command line now accepts ctrl+c and will push an exception into the system

--------------------------------------------------------------------------------------------------------
02.05.2003 18:36 (BST), ctr

  * Blocked nested variables now work correctly
  * Added scripts/test/nested.fe

--------------------------------------------------------------------------------------------------------
01.05.2003 23:32 (BST), ctr

  * Start of block nested variables
  * Fixed a problem with scripts and the classic memory manager

--------------------------------------------------------------------------------------------------------
18.04.2003 19:21 (BST), ctr

  * Executor fixes to make things cleaner
  * made it such that the script is marked as executing even if the script has already been run.

--------------------------------------------------------------------------------------------------------
09.04.2003 19:40 (BST), ctr

  * Fixed fake module loading
  * Number of bug fixes
  
--------------------------------------------------------------------------------------------------------
09.04.2003 17:05 (BST), ctr

  * Various builder fixes and clean ups
  * Various code clean ups to make things cleaner in the modules

--------------------------------------------------------------------------------------------------------
07.04.2003 13:21 (BST), ctr

  * Bug fix

--------------------------------------------------------------------------------------------------------
27.03.2003 10:24 (GMT), ctr

  * You can now hash using an object as a key. If you want to change the hashing
  	of an object and it's class overide the function hash() method

--------------------------------------------------------------------------------------------------------
24.03.2003 13:04 (GMT), ctr

  * This should fix problems with files from different platforms messing the scanner up

--------------------------------------------------------------------------------------------------------
09.03.2003 08:28 (GMT), ctr

  * Some documentation additions to src/ferite_class.c 
  * Added ferite_class_finish() to do post processing on a class
  * Tweaks to calling code in various modules

--------------------------------------------------------------------------------------------------------
09.03.2003 01:31 (GMT), ctr

  * Fixed buffer usage within the compiler
  * Fixed and updated the sys modules code and copyrights

--------------------------------------------------------------------------------------------------------
08.03.2003 22:09 (GMT), ctr

  * Copyright update for 2003

--------------------------------------------------------------------------------------------------------
08.03.2003 22:00 (GMT), ctr

  * Changed default behavior. Variables are now public by default. Private was too strict for ferite as 
    a scripting language

--------------------------------------------------------------------------------------------------------
08.03.2003 19:44 (GMT), ctr

  * Enabled self. and super. in namespaces and classes. This also opens up the use of .foo as that is 
    an alias for self.foo. In namespaces super points to the outer namespace, and to the parent class 
	in classes.
  * Correct use of static constructor calling
  * Fixed super()
  * Removed ferite_object_add_self_to_params() as it is no longer needed
  * Changed it so that ferite_call_function will take NULL for a zero sized parameter list

--------------------------------------------------------------------------------------------------------
08.03.2003 18:33 (GMT), ctr

  * Added calling of static constructor and destructor methods within a class

--------------------------------------------------------------------------------------------------------
08.03.2003 10:56 (GMT), ctr

  * Added function aliasing in class/objects, see scripts/test/alias.fe

--------------------------------------------------------------------------------------------------------
07.03.2003 14:04 (GMT), ctr

  * A couple more convinience functions for variable creation

--------------------------------------------------------------------------------------------------------
07.03.2003 08:40 (GMT), ctr

  * Added three defines to turn off the use of 'config.h' - for native ports that do not use autofoo. 
    These are FERITE_AS_COMPONENT, TRITON_AS_COMPONENT, APHEX_AS_COMPONENT.

--------------------------------------------------------------------------------------------------------
18.02.2003 00:37 (GMT), ctr

  * Major internal change. Functions now take a context, this can be either an object, a class or a 
    namespace. This means that functions [specifically native functions] can see what context they are 
	sitting in - usefull for dynamic applications. It also means that you no longer need to pass the 
	object you are calling a method in twice as it is handled by the context. 

    This change fixes what I consider broken behavior since pretty much the existance of objects within 
	the ferite engine.
	
	The main functions to check for are
	
	   ferite_script_function_execute
	   ferite_call_function
	   
	Have a look at how they have changed.
	
	Please NOTE you no longer have to pass two objects as extra parameters to method calls. You simply 
	pass the object as the container.
	
  * Updated builder to generate correct C code. Now depending on whether or not the function is from a 
    class (static) or a namespace 'self now points to those.
  
  * Fixed all module code that was broken as a result of this change.
  
  * Script tweaks to make them work [broken a while ago]
  
  * Various bug fixes
  
  FOR THE MINUTE, THIS CODE IS EXPERIMENTAL. THIS IS THE WARNING.

--------------------------------------------------------------------------------------------------------
17.02.2003 13:53 (GMT), ctr

  * Fix to stop multiple destructors in a class/object

--------------------------------------------------------------------------------------------------------
16.02.2003 16:41 (GMT), ctr

  * attribute_missing and method_missing both work correctly on classes.
  * slight wording fix to the executor

--------------------------------------------------------------------------------------------------------
16.02.2003 15:22 (GMT), ctr

  * "" + void => "" rather than "(void)"

--------------------------------------------------------------------------------------------------------
16.02.2003 14:49 (GMT), ctr

  * Fix to the Stat class in the sys module
  * Updated the version number to 0.99.7

--------------------------------------------------------------------------------------------------------
16.02.2003 14:37 (GMT), ctr

  * Abstract and final classes

--------------------------------------------------------------------------------------------------------
16.02.2003 14:10 (GMT), ctr

  * Fix in the compiler to stop multiple same modifiers being declared

--------------------------------------------------------------------------------------------------------
16.02.2003 13:32 (GMT), ctr

  * More fixes to the FeriteClass change
  * Access control now works on class's
  * The executor has had some tweaks and changes for code paths that would never be run.

--------------------------------------------------------------------------------------------------------
15.02.2003 19:20 (GMT), ctr

  * Made a distinction between the class and object methods within a class structure to fix a potential 
    issue in the executor with it getting confused about overloaded methods and a mix of static and 
	non-static.
  * Removed src/ferite_class.c:ferite_find_function_in_object and replaced the code that used it to 
    use ferite_object_get_function
  * Fixed any code that looked at a class's ->function hash

--------------------------------------------------------------------------------------------------------
11.02.2003 10:43 (GMT), ctr

  * Added stack depth checks
  * Added method protection checking code
  * Accessors now work

--------------------------------------------------------------------------------------------------------
11.02.2003 01:22 (GMT), ctr

  * Change to make an objects variables more sane - they now represent the inherited behavior
  * Updated modules to use the correct API

--------------------------------------------------------------------------------------------------------
09.02.2003 23:08 (GMT), ctr

  * Start of work on accessors, currently variables are private and methods public. 

    Next thing is to add the access control to the executor.

--------------------------------------------------------------------------------------------------------
21.01.2003 17:31 (GMT), ctr

  * Added doneils code

--------------------------------------------------------------------------------------------------------
15.01.2003 18:45 (GMT), ctr

  * Backtraces

--------------------------------------------------------------------------------------------------------
08.01.2003 19:25 (GMT), ctr

  * I would like to say that 0.99.6 is now being released. Thank you to every one that contributed

--------------------------------------------------------------------------------------------------------
06.01.2003 22:52 (GMT), ctr

  * More docs stuff almost there for a release, it would come along faster, but it's just so dull.
  * Fix for some sillyness in the comparison operators

--------------------------------------------------------------------------------------------------------
02.01.2003 20:04 (GMT), ctr

  * Fix a semantic bug with err == null at startup would cause a pita if it 
    was being checked -> therefore required exception handling -> dirty code

--------------------------------------------------------------------------------------------------------
02.01.2003 19:49 (GMT), ctr

  * Fix to tm struct items in the sys module
  
--------------------------------------------------------------------------------------------------------
31.12.2002 14:54 (GMT), ctr

  * Various Solaris fixes - it now builds cleanly :)
  * Modification to the docs/Makefile.am to allow for api and capi building from
    a make command

--------------------------------------------------------------------------------------------------------
30.12.2002 23:17 (GMT), alex
Rewrote String.pad() and String.blocks() to eliminate some nasty bugs.

--------------------------------------------------------------------------------------------------------
30.12.2002 13:40 (GMT), alex
Rewrote String.escape() and String.unescape(). Fixes a nasty buffer overflow
bug, and properly implements the full set of standard C escape sequences.
Added a test script for the above two functions.

--------------------------------------------------------------------------------------------------------
29.12.2002 21:20 (GMT), ctr

  * Bug fix for the ability to obtain the attributes from a method return. Need to fix it for normal
    namespace functions.

--------------------------------------------------------------------------------------------------------
29.12.2002 11:26 (GMT), ctr

  * Part one of a documentation clean up

--------------------------------------------------------------------------------------------------------
28.12.2002 13:07 (GMT), alex
Added Array.sort()

--------------------------------------------------------------------------------------------------------
28.12.2002 00:48 (GMT), ctr

  * Significant speed up to feritedoc! :)

--------------------------------------------------------------------------------------------------------
27.12.2002 22:49 (GMT), ctr

  * Saner packet based tcpip layer for rmi
  * Fixed String.postTrim and added String.blocks and String.pad
  * Fixed foreach reset bug alex pointed out
  * Test fix for another array-in-script-iteration bug within foreach

--------------------------------------------------------------------------------------------------------
27.12.2002 16:47 (GMT), ctr

  * Some reflection clean ups and error bugs
  * Various internal tweaks to make certain things more sane
  
--------------------------------------------------------------------------------------------------------
27.12.2002 08:34 (GMT), ctr

  * Slight tweak to have the signature checking code use the variable type check function + some
    cruft removal.

--------------------------------------------------------------------------------------------------------
27.12.2002 06:48 (GMT), ctr

  * Added a few lines of code allowing you to store pointers to both classes and namespaces in void 
    variables. This adds another level of cunning clean dynamicism to ferite.
  * Added a test script "scripts/test/passnscls.fe"
  
--------------------------------------------------------------------------------------------------------
25.12.2002 20:50 (GMT), ctr

  * A bit more rmi work - you can now set attributes through assignment.
  * Modified reflection to add a class to allow fro variable tracing

--------------------------------------------------------------------------------------------------------
25.12.2002 01:40 (GMT), ctr

  * Reworked some code in reflection module to fix a hack at overloading which ferite can now handle
  * rmi works! run scripts/test/rmi/server.fe in one term, and run scripts/test/rmi/test.fe in another
    and see the magic work! :)
    
  Happy Holidays. With a little more work and some more code testing this, along with ferite 0.99.6
  can be released :)

--------------------------------------------------------------------------------------------------------
25.12.2002 00:54 (GMT), ctr

  * Lots more rmi work
  * rmi server example
  * Various additions to the reflection api to make it work better :)

--------------------------------------------------------------------------------------------------------
24.12.2002 14:16 (GMT), ctr

  * Fixed a compiler bug when reporting line numbers of included scripts

--------------------------------------------------------------------------------------------------------
24.12.2002 01:27 (GMT), ctr

  * Even more rmi work, the standard protocol can encode and decode variables
  * Fixed a bug in foreach()

--------------------------------------------------------------------------------------------------------
23.12.2002 21:37 (GMT), ctr

  * More rmi stuff
  * String.unescape

--------------------------------------------------------------------------------------------------------
23.12.2002 15:51 (GMT), ctr

  * Two more useful reflection class methods Class.classWithName() and Class.newObject()
  * Slight tweak in the executor to stop us doing things twice
  * An rmi module - this wont be released with 0.99.6. It's aim is to be pure ferite pluggable distributed
    ferite system which provides a transparent remote object access.

--------------------------------------------------------------------------------------------------------
23.12.2002 11:13 (GMT), ctr

  * Added String.escape - a short method to quickly escape a string so that it can be quoted

--------------------------------------------------------------------------------------------------------
22.12.2002 23:33 (GMT), ctr

  * Fixed another memory leak that occured when the api for ferite_object_call_super was changed. The
    return value from this function must be free'd. It used to not return anything.
  * Added --warnings [-w] to the ferite command line program to display warnings even if there is no
    compile error.
  * Updated man page.

--------------------------------------------------------------------------------------------------------
22.12.2002 18:57 (GMT), ctr

  * Fix of a semantic bug with foreach whic I now agree is wrong [pointed out by holden]. You can
    use a void variable to iterate through an array with various types and it will be reset on each
    iteration.
  * Fixed an issues where caught errors where still being reported.
  * Fixed warning reporting back to the user.
  * Saner error handling in the threading code

--------------------------------------------------------------------------------------------------------
22.12.2002 01:55 (GMT), ctr

  * Another fix for opcode stuff. Amazes me that this went so long with out a fix.

--------------------------------------------------------------------------------------------------------
20.12.2002 16:55 (GMT), ctr

  * Fix for opcode deletion, and well, opcodes in general - too bizarre to explain. But it was an
    issue if you have just enough opcodes to fill the list - it wont be made bigger, and the next 
    opcode wont be made NULL. Therefore it would run off the end of the list. This should also fix
    the duplication bug cms was seeing.
  * Fix for IPV6 networking code on OS X - the hint structure has to be NULL/0 for all fields except
    a few.

--------------------------------------------------------------------------------------------------------
20.12.2002 14:30 (GMT), ctr

  * Slight fix in the executor which would mean a bug in function calling wouldnt show
  * Signal handler code which will hapilly work per multiple scripts runnign concurrently
    in the engine.

--------------------------------------------------------------------------------------------------------
17.12.2002 13:22 (GMT), alex
Changed Sys.getcwd() to allocate its buffer dynamically because the PATH_MAX
constant isn't a reliable or portable way to determine the actual maximum
possible length of a path in any given file system.

--------------------------------------------------------------------------------------------------------
16.12.2002 22:16 (GMT), alex
Fixed classic format string security hole in syslog.

--------------------------------------------------------------------------------------------------------
16.12.2002 15:44 (GMT), alex
Added Array.union(), Array.intersect(), and Array.subtract().
Added a test script (sets.fe) for the above functions.

--------------------------------------------------------------------------------------------------------
16.12.2002 12:44 (GMT), alex
Generate the system constant arrays using a shell script at build time, with
#ifdefs around every constant. Avoids the problem that not all of the constants
are present on every platform and also makes it a bit easier to maintain the
list of constants.

--------------------------------------------------------------------------------------------------------
16.12.2002 11:01 (GMT), alex
Make the constants actually constant, so the user can't accidentally modify
their value.

--------------------------------------------------------------------------------------------------------
16.12.2002 10:42 (GMT), alex
Added the errno constants.

--------------------------------------------------------------------------------------------------------
16.12.2002 10:13 (GMT), alex
Added Sys.utime()

--------------------------------------------------------------------------------------------------------
16.12.2002 09:17 (GMT), alex
Switched from using fixed system constant values to creating them at runtime
from a table in module-init. Probably not the final solution to the problem,
but hopefully a step in the direction of greater portability...

--------------------------------------------------------------------------------------------------------
16.12.2002 08:55 (GMT), alex
Added a few test scripts.

--------------------------------------------------------------------------------------------------------
15.12.2002 23:28 (GMT), ctr

  * Hopefully the fix for holden's segfault bug he found
  * A few documentation additions

--------------------------------------------------------------------------------------------------------
15.12.2002 11:02 (GMT), alex
Fix to segfault when running "ferite -e" without specifying an argument, found
by doneill.

--------------------------------------------------------------------------------------------------------
14.12.2002 20:01 (GMT), alex
Implemented Sys.StringStream.
Changed opendir() to return a StringStream instead of a DirStream.
Implemented Sys.Dir.

--------------------------------------------------------------------------------------------------------
14.12.2002 15:19 (GMT), alex
Fixed the ffree() macro which was expanding into two statements without any
brackets around them, which was causing a buffer overrun in the engine (see
changelog on include/ferite/fmem.h for details).
Fixed a bug in the engine where two structures were being allocated too small
for the data that was going in them.
Fixed a bug in the engine where an array was being overrun by one.
All three bugs were found by Electric Fence.

--------------------------------------------------------------------------------------------------------
14.12.2002 08:24 (GMT), alex
Fixed the bug which was causing Sys.timestamp() to return a totally bogus
fractional part (usec = millionths of a second, not thousandths).

--------------------------------------------------------------------------------------------------------
13.12.2002 12:14 (GMT), ctr

  * Various tweaks and fixes

--------------------------------------------------------------------------------------------------------
10.12.2002 17:22 (GMT), alex
Fixed a bug in Sys.system() which was causing it to return the wrong return
value from the system command.

--------------------------------------------------------------------------------------------------------
09.12.2002 16:37 (GMT), ctr

  * Fixed a segfault in printf()
  * Modified the api for add_self such that it takes an object not a variable [like the other 
    object/class functions]
  * Fixed a memory leak
  * Change the executor and what not to use the get methods for functions and classes like good people 
    should. This is the correct way of doing things.
  * Various tweaks

--------------------------------------------------------------------------------------------------------
09.12.2002 15:13 (GMT), alex
Added Sys.Stream.printf()

--------------------------------------------------------------------------------------------------------
09.12.2002 12:54 (GMT), alex
Added the String.is*() functions.
Added String.sprintf().

--------------------------------------------------------------------------------------------------------
06.12.2002 20:21 (GMT), alex
Partially implemented signal handling support

--------------------------------------------------------------------------------------------------------
05.12.2002 23:33 (GMT), ctr

  * Compiler fix doneill spotted

--------------------------------------------------------------------------------------------------------
05.12.2002 21:52 (GMT), alex
Added String.charToNum() and String.numToChar().

--------------------------------------------------------------------------------------------------------
05.12.2002 19:39 (GMT), ctr

  * Fixed the compiler to make sure that not only it check for maximum parameters but also the maximum
    number of arguments used in a function call.
  * Fixed builder to handle multiple native functions
  * Added the ability to register fake modules [for embedding ferite in applications]

--------------------------------------------------------------------------------------------------------
04.12.2002 12:09 (GMT), ctr

  * Docs on writing a native function by hand and writting a native module

--------------------------------------------------------------------------------------------------------
04.12.2002 12:02 (GMT), alex
Added String.toHex() and fixed Network.UDPSock.recv() to return an empty string
on error instead of a null object.

--------------------------------------------------------------------------------------------------------
02.12.2002 19:25 (GMT), alex
Added doneill's Array.toHash() and Array.getEntrynum() functions (slightly
modified and renamed to Array.combine() and Array.find()).

--------------------------------------------------------------------------------------------------------
02.12.2002 18:00 (GMT), ctr
 
  * Added meaningfull exceptions to foreach()
  * Added ferite_types_are_equal() to test whether or not two variable's types are equal according to 
    ferite

--------------------------------------------------------------------------------------------------------
02.12.2002 17:32 (GMT), ctr

  * Fix for an odd compiler bug. Only exhibited if a script was include()'d and uses "" a module not 
    previously loaded. 

--------------------------------------------------------------------------------------------------------
02.12.2002 13:48 (GMT), ctr

  * Fixed a bug in util_network.c where in IPV4 only mode the code would go and write 16 bytes to a 4 
    byte structure

--------------------------------------------------------------------------------------------------------
02.12.2002 13:08 (GMT), alex
Added shorter forms of tcp_connect(), tcp_bind(), UDPSocket.connect(), and
UDPSocket.bind() for backwards compatibility and convenience reasons.

--------------------------------------------------------------------------------------------------------
02.12.2002 11:58 (GMT), ctr

  * Added a parameter to the ferite_error() call

--------------------------------------------------------------------------------------------------------
02.12.2002 11:46 (GMT), alex
Added an overloaded String.toArray() function which has the same arguments
as the old toArray().

--------------------------------------------------------------------------------------------------------
02.12.2002 11:11 (GMT), ctr

  * More embedding docs

--------------------------------------------------------------------------------------------------------
02.12.2002 10:36 (GMT), alex
Added configure checks for various things in the sys module.
Rewrote a lot of the networking code to fully support IPV6 and also work on
machines which don't support IPV6.
Documented the fact that inet_aton() and inet_ntoa() are deprecated because
they don't support IPV6.

--------------------------------------------------------------------------------------------------------
02.12.2002 07:44 (GMT), ctr

  * Adding embed.sgml - currently it will generate documentation and is fairly complete. The only 
    sections that really need to be done are: Native Modules By Hand, Embedding Ferite, and a set of 
	real world examples for people to refer to. The first two should come pretty quickly.

--------------------------------------------------------------------------------------------------------
30.11.2002 22:51 (GMT), ctr

  * Fixed a bug in method overloading in classes
  * Changed the api for adding methods to a class slightly to keep it inline with adding variables

--------------------------------------------------------------------------------------------------------
30.11.2002 21:47 (GMT), alex
The fix to split() was not correct because it changed its behaviour (this was
accidental- the function was not documented adequately and I misunderstood what
the broken code was trying to do). However, the new behaviour is quite useful
in itself, so I've renamed the new version of split() to dissect() in order to
make it clear that it is different from split(). If anyone actually wants the
behaviour which split() was supposed to have, they are welcome to put it back
in after fixing it. 
I also added a new feature to toArray() and dissect() requested by doneill- a
limit parameter which if > 0, limits the maximum number of times which the
string is cut into substrings (apparently this is a feature of split() in Perl).

--------------------------------------------------------------------------------------------------------
30.11.2002 17:40 (GMT), alex
Rewrote String.split() because the old one was broken. Rewrote the
documentation of String.split() and String.toArray() because it wasn't clear
what each did and what the difference between them was.

--------------------------------------------------------------------------------------------------------
30.11.2002 16:21 (GMT), ctr

  * If you are going to terminate a string, do it properly.

--------------------------------------------------------------------------------------------------------
30.11.2002 10:36 (GMT), ctr

  * Fix for foreach bug found by doneill

--------------------------------------------------------------------------------------------------------
29.11.2002 15:54 (GMT), ctr

  * Some more changes to the docs
  * Fix for iferr

--------------------------------------------------------------------------------------------------------
29.11.2002 14:48 (GMT), alex
Rewrote String.isNumber() again because I thought of a much nicer way of doing
it.

--------------------------------------------------------------------------------------------------------
29.11.2002 14:27 (GMT), alex
Rewrote String.toNumber()

--------------------------------------------------------------------------------------------------------
29.11.2002 13:54 (GMT), ctr

  * Got the doc system up and running agian, I can now generate the online, html and pdf manual

--------------------------------------------------------------------------------------------------------
28.11.2002 22:59 (GMT), alex
Rewrote String.isNumber() because it didn't work at all.

--------------------------------------------------------------------------------------------------------
28.11.2002 19:51 (GMT), ctr

  * New to string method

--------------------------------------------------------------------------------------------------------
28.11.2002 15:24 (GMT), alex
Implemented Sys.select()

--------------------------------------------------------------------------------------------------------
27.11.2002 20:44 (GMT), alex
Fixed the Sys.UnixStream.path variable and added the Network.UDPSocket class.

--------------------------------------------------------------------------------------------------------
27.11.2002 15:59 (GMT), alex
Added Sys.UnixStream, Network.unix_bind(), and Network.unix_connect().

--------------------------------------------------------------------------------------------------------
27.11.2002 13:43 (GMT), alex
Implemented Network.Host and fixed tcp_connect() and tcp_bind() to use the new
thread-safe lookup routines. Also removed a superflous semicolon from the end
of the frealloc() macro.

--------------------------------------------------------------------------------------------------------
26.11.2002 22:33 (GMT), alex
Changed bofh.fe to use the Ferite BOFH excuse server on www.alexholden.net:6666
and also to check for failure to connect.
Fixed a compiler warning bug in syslog.fec
Added Network.getHostname(), Network.Service, Network.getServiceByPort(), and
Network.getServiceByName().

--------------------------------------------------------------------------------------------------------
26.11.2002 18:59 (GMT), alex
Added the rest of the signal constants and a conversion function to work
around the problem of other flavours of Unix having different signal numbers.

--------------------------------------------------------------------------------------------------------
25.11.2002 23:42 (GMT), alex
Added Sys.waitpid(), Sys.sleep(), Sys.access(), Sys.umask(), Sys.mkfifo(),
Sys.Pipe, Sys.Uname, Sys.chmod(), Sys.chown(), Sys.Chroot(),
Sys.FileStream.lock() Sys.FileStream.unlock(), Sys.geteuid(), Sys.setuid(),
Sys.getgid(), Sys.getegid(), Sys.setgid(), Sys.getpid(), Sys.getppid(),
Sys.setsid(), Sys.kill(), Sys.getpriority(), Sys.setpriority(), Sys.Rusage,
Sys.Rlimit, Sys.Rusage, and Sys.exec().

--------------------------------------------------------------------------------------------------------
25.11.2002 23:21 (GMT), ctr

  * fixed a <operator>= bug spotted by Alex. ferite would segfault if the result of the operator caused 
    an exception [it didnt check before assigning therefore messing up]

--------------------------------------------------------------------------------------------------------
25.11.2002 20:34 (GMT), ctr

  * Fixed a bug with negative number initialisers on class/namespace variables spotted by alexholden

--------------------------------------------------------------------------------------------------------
25.11.2002 14:25 (GMT), ctr

  * Applied Alex Holdens syslog patch

--------------------------------------------------------------------------------------------------------
23.11.2002 13:58 (GMT), ctr

  * Fixed a problem in the compiler with regards to objects
  * Fixed a memory leak in the compiler when it transformed internal functions to external ones

--------------------------------------------------------------------------------------------------------
23.11.2002 12:47 (GMT), ctr

  * Fix in triton's dlfcn loader from a bug spotted by Alex Holden

--------------------------------------------------------------------------------------------------
21.11.2002 22:44 (GMT), ctr

  * Tweaked the .cvsignore files

--------------------------------------------------------------------------------------------------------
21.11.2002 22:36 (GMT), ctr

  * Added F_OP_PUSHATTR to the executor, this removes a dedicated if statement, granted this is nothing 
    really - it just makes things more obivous
  * Added F_OP_PUSHINDEX, now local variables whithin a function [including parameters] are accessed 
    via an index - this makes things like loops faster.
  * Various compiler fixes and enhancements
  * Some more utility methods
  
  Next thing to do is to add block-nested-variables

--------------------------------------------------------------------------------------------------------
18.11.2002 14:02 (GMT), ctr

  * Some more clean ups and fixes - bugs that have been missed for a while now

--------------------------------------------------------------------------------------------------------
16.11.2002 14:57 (GMT), ctr

  * Various source cleanups

--------------------------------------------------------------------------------------------------------
04.10.2002 14:16 (BST), ctr

  * Have fixed script duplication from when i broke it the other day!

--------------------------------------------------------------------------------------------------------
27.09.2002 12:44 (BST), ctr

  * Fix for function duplication in script duplication. To handle method overloading

--------------------------------------------------------------------------------------------------------
25.09.2002 18:38 (BST), ctr

  * yet a few more document stuff

--------------------------------------------------------------------------------------------------------
24.09.2002 20:15 (BST), ctr

  * More documentation changes
  * Some changes to the html template in feritedoc

--------------------------------------------------------------------------------------------------------
24.09.2002 13:20 (BST), ctr

  * More c api docs - upto ferite_obj.c
  * Fix for include()

--------------------------------------------------------------------------------------------------------
24.09.2002 09:38 (BST), ctr

  * Added Array.getName( array, index ) to get the name of an index's name
  * Added Obj.copy() 
  * Moved Obj specific code into src/ferite_obj.c and include/ferite/fobj.h
  * Fixed regex's so the right number of count's are cleared on each one

--------------------------------------------------------------------------------------------------------
17.09.2002 14:49 (BST), ctr

  * Function caching, this should provide about [from tests] a 6% increase in speed
  * Removed the delete keyword, I have decided that I dont like it

--------------------------------------------------------------------------------------------------------
16.09.2002 10:19 (BST), ctr

  * More documentation, done foreach and fncArgs changes

--------------------------------------------------------------------------------------------------------
15.09.2002 14:36 (BST), ctr

  * Fix for constructor overloading

--------------------------------------------------------------------------------------------------------
13.09.2002 11:48 (BST), ctr

  * Fix for gc bug. Freeing up the wrong generation.

--------------------------------------------------------------------------------------------------------
12.09.2002 13:07 (BST), ctr

  * remove fncArgs - it is a huge overhead for little benifit
  * to get the arguements, use the sudo function getArgs 
  * updated scripts to work with it

--------------------------------------------------------------------------------------------------------
12.09.2002 11:23 (BST), ctr

  * Added method overloading and an example. This is experimental but should work!

--------------------------------------------------------------------------------------------------------
11.09.2002 15:55 (BST), ctr

  * Fix for assignments which caused segfaults
  * Added ( expr ? expr : expr ) conditional statement. You HAVE to use the brackets.

--------------------------------------------------------------------------------------------------------
10.09.2002 10:40 (BST), ctr

  * Fix for an incorrect String.reverse bug

--------------------------------------------------------------------------------------------------------
05.09.2002 10:06 (BST), ctr

  * Fix for a dumbass mistake.

--------------------------------------------------------------------------------------------------------
03.09.2002 16:40 (BST), ctr

  * Slight clean up

--------------------------------------------------------------------------------------------------------
03.09.2002 12:33 (BST), ctr

  * Better function declaration parsing - you can't put variables after a '...' this means that better 
    assumptions can be made in the executor.
  * Fix for the gc generalisation code - we need 'extern' in the header.
  * Fix for cache deinit for when the compilation fails

--------------------------------------------------------------------------------------------------------
02.09.2002 01:31 (CEST), stephan_eng

  * Made hashtables growable, it will speedup large hashsets quite a bit.

--------------------------------------------------------------------------------------------------------
01.09.2002 21:49 (CEST), stephan_eng

  * Made the GC work per thread, so the locks around the GC could be removed
  * Removed the ifdefs around the GC calls and used functionpointers instead
    for plugin GC

--------------------------------------------------------------------------------------------------------
31.08.2002 15:11 (BST), ctr

  * Some changes in the code that dispatches functions this works, so I am committing it. This is the 
    start of the method overloading code.
  * Fixed a memory leak in the cache code
  
--------------------------------------------------------------------------------------------------------
30.08.2002 16:23 (CEST), stephan_eng

  * Variables have a flag now if it's name is allocated or not, gives huge speedup

--------------------------------------------------------------------------------------------------------
30.08.2002 14:21 (BST), ctr

  * fix for another bug that stephan told me about with the issues of arrays within arrays.

--------------------------------------------------------------------------------------------------------
30.08.2002 09:56 (BST), ctr

  * Fix for nested structures and the 'break' statement

--------------------------------------------------------------------------------------------------------
28.08.2002 16:27 (CEST), stephan_eng

  * Try to cache variables, stacks and objects. We cut down number of mallocs 25%

--------------------------------------------------------------------------------------------------------
12.08.2002 17:39 (CEST), stephan_eng

  * Cleanup of hash functions and a pretty good speedup

--------------------------------------------------------------------------------------------------------
29.07.2002 13:19 (CEST), cms
  
  * XML module work:
    Implemented a validating tree parser
    and the ability to fetch values from the tree using XPath.
    The parser can parse XML from files or from a string in memory,
    save the tree to a file or return it as a string.


--------------------------------------------------------------------------------------------------------
24.07.2002 01:08 (CEST), stephan_eng

  * Better serializer. Handles object references and a buch of sanity checks

--------------------------------------------------------------------------------------------------------
22.07.2002 22:38 (CEST), cms

  * Implemented: ferite_verror() && ferite_vwarning()
  * XML module error and warning callbacks.

--------------------------------------------------------------------------------------------------------
22.07.2002 20:25 (CEST), cms

  * Renamed class xml to saxparser.
  * Implemented: comments, cdata, PI callback functions in the sax parser,
	         ParseChunk() parse an xml string from memory,
	
--------------------------------------------------------------------------------------------------------
22.07.2002 19:05 (BST), ctr

  * Added object support to foreach also added an example

--------------------------------------------------------------------------------------------------------
21.07.2002 21:52 (BST), ctr

  * Implemented foreach! :) Works with strings and arrays

--------------------------------------------------------------------------------------------------------
21.07.2002 14:02 (CEST), cms

  * xml module now works again. 

--------------------------------------------------------------------------------------------------------
20.07.2002 16:54 (GMT), ctr

  * Darwin fixes
  * Fix for module loading in builder

--------------------------------------------------------------------------------------------------------
20.07.2002 16:47 (CEST), cms

  * Solaris build fix.
	
--------------------------------------------------------------------------------------------------------
19.07.2002 10:53 (BST), ctr

  * Fix for solaris

--------------------------------------------------------------------------------------------------------
19.07.2002 09:25 (BST), ctr

  * Fix a bug in the native functions

--------------------------------------------------------------------------------------------------------
18.07.2002 14:25 (BST), ctr

  * Repeat after me, chris is a stupid moron, remeber to _clear_ a string before you write to it, so 
    it gets terminated correctly.

--------------------------------------------------------------------------------------------------------
18.07.2002 10:55 (BST), ctr

  * Find myself writing functions that do one little 'operation'. I decided to add the ability to just 
    put a statement under the function declaration rather than having to put the {}'s there aswell. It 
	works for if statements, why not functions? :)

    e.g. instead of:
	
	  function foo( void someVar )
	  {
	      return someVar+1;
	  }
	  
    you can now do
	
	  function foo( void someVar )
	    return someVar + 1;

  * Slight change to the xml module
  * Work on XML-RPC interface
  * Hopefully a speed up on module loading - removed some expensive system calls
  
--------------------------------------------------------------------------------------------------------
17.07.2002 15:08 (BST), ctr

  * You can now do super() to call the parent constructor :)

--------------------------------------------------------------------------------------------------------
17.07.2002 11:16 (BST), ctr

  * Fix the many op that I broke yesterday =/

--------------------------------------------------------------------------------------------------------
16.07.2002 15:33 (BST), ctr

  * A little bit of code to test duplication vs. compilation - looks like duplication is 360% or so 
    faster, which means that it was worth the hassle :)

--------------------------------------------------------------------------------------------------------
16.07.2002 14:58 (BST), ctr

  * Script duplication should now work - use with care!

--------------------------------------------------------------------------------------------------------
16.07.2002 09:21 (BST), ctr

  * Slight change with accessors to variables - makes them more sane :)
  * Slight change in behavior in the constructor calling code.
  
    If a null object is returned, a null object will be returned to the caller of 'new'
	If a C NULL is returned an exception is thrown
	Otherwise the constructor is assumed to have worked correctly 
	
--------------------------------------------------------------------------------------------------------
15.07.2002 23:51 (BST), ctr

  * Added Function.getParameterDetails() to reflection module
  * More work on script duplication

--------------------------------------------------------------------------------------------------------
12.07.2002 21:50 (BST), ctr

  * Saner triton compilation

--------------------------------------------------------------------------------------------------------
12.07.2002 19:26 (BST), ctr

  * Removed some dead wood with script->exec_stack [not needed]
  * Modified the case statement slightly internally to make it work with the above change
  * Made threading a compile time option

--------------------------------------------------------------------------------------------------------
12.07.2002 16:18 (BST), ctr

  * Fixed a bug found by cms when you try and call a function which isn't a function
  * x86 Profiler support from stephan

--------------------------------------------------------------------------------------------------------
12.07.2002 11:28 (CEST), stephan_eng

  * Changed the variable flags to use a bitmask instead of char's

--------------------------------------------------------------------------------------------------------
10.07.2002 22:55 (BST), ctr

  * And 0.99.5 was realsed unto the world

---------------------------------------------------------------------------------------------------------
10.07.2002 22:43 (BST), ctr

  * Tweaks and tidy ups preparing for release
  * Complex number class for the maths module

--------------------------------------------------------------------------------------------------------
10.07.2002 15:59 (BST), ctr

  * A feritedoc wrapper around generate-module

--------------------------------------------------------------------------------------------------------
10.07.2002 10:06 (CEST), cms

  * build issues (sys module).

--------------------------------------------------------------------------------------------------------
09.07.2002 15:59 (BST), ctr

  * Added docs/build_api_docs.sh - now everyone can have their own copy of documentation

--------------------------------------------------------------------------------------------------------
09.07.2002 14:59 (BST), ctr

  * Some more work on feritedoc/html output - it is now all css driven

--------------------------------------------------------------------------------------------------------
09.07.2002 15:25 (CEST), cms

  * generate-module fixxes.

--------------------------------------------------------------------------------------------------------
09.07.2002 02:04 (BST), ctr

  * Compiler error fix
  * ferite doc now handles modified classes and namespaces [almost correctly]

--------------------------------------------------------------------------------------------------------
08.07.2002 21:49 (BST), ctr

  * Comments for array, console, math, reflection, serialization, string
  * Image files are now copied over when the docs are created
  * Added --prefix to feritedoc to allow for a different directory to be used for output

--------------------------------------------------------------------------------------------------------
08.07.2002 19:13 (BST), ctr

  * The html output works with feritedoc

--------------------------------------------------------------------------------------------------------
08.07.2002 13:07 (BST), ctr

  * Some fixes for including a file
  * feritedoc the program now works when installed

--------------------------------------------------------------------------------------------------------
08.07.2002 12:13 (BST), ctr

  * Another fix for arrays in script - required an extra operator =/
  * Text output for feritedoc works

--------------------------------------------------------------------------------------------------------
07.07.2002 19:02 (BST), ctr

  * couple of fixes

--------------------------------------------------------------------------------------------------------
05.07.2002 13:16 (BST), ctr

  * Added a contrib directory
  * Added modes for jed, kate [for KDE], and vim to do syntax highlighting

--------------------------------------------------------------------------------------------------------
04.07.2002 13:32 (BST), ctr

  * A couple of changes to the compiler to make return values from include and eval availible to the 
    scripter
  * A bug fix with the exception handling of the constructor calling now handled correctly
  * More doc generator work

--------------------------------------------------------------------------------------------------------
03.07.2002 09:20 (BST), ctr

  * aphex clean ups

--------------------------------------------------------------------------------------------------------
03.07.2002 08:59 (BST), ctr
 
  * Fixed Darwin support. It was stephans fault =P

--------------------------------------------------------------------------------------------------------
02.07.2002 20:42 (BST), ctr

  * More darwin fixes thanks to Carl Drinkwater

--------------------------------------------------------------------------------------------------------
02.07.2002 13:52 (BST), ctr

  * cygwin support is now there out of the box
  * re-write of the recursive mutex code based upon some reading

--------------------------------------------------------------------------------------------------------
01.07.2002 16:48 (CEST), ctr

  * A man page for builder

--------------------------------------------------------------------------------------------------------
01.07.2002 14:19 (BST), ctr

  * Slight fix to the variable accessor system
  * Some documents about them
  * Header update

--------------------------------------------------------------------------------------------------------
01.07.2002 13:57 (BST), ctr

  * Added file-prefix to builder allowing for generated files to be placed in a different dir rather 
    than the current
  * Accessors should now work

--------------------------------------------------------------------------------------------------------
01.07.2002 13:10 (BST), ctr

  * Added attribute_missing -> see scripts/test/autoload.fe
  * Changed 'autoload' to 'method_missing', makes things more coherrent and inline
  * Started work on variable accessor code, now I just have to hook it up in the executor and the 
    assignment operator
  * Formatted the scripts properly
  
--------------------------------------------------------------------------------------------------------
29.06.2002 10:05 (BST), ctr

  * Changes to triton

--------------------------------------------------------------------------------------------------------
29.06.2002 09:49 (BST), ctr

  * Two fixes for darwin [triton library loader and in Sys.timestamp()]
  * Reformated all the module .fec's and added a copyright to the thread one

--------------------------------------------------------------------------------------------------------
28.06.2002 21:52 (BST), ctr

  * Formated src/ferite_parser.y

--------------------------------------------------------------------------------------------------------
28.06.2002 16:42 (BST), ctr

  * Reformat of code - all the same style now :)
  * Copyright updates on files without them

--------------------------------------------------------------------------------------------------------
28.06.2002 15:55 (BST), ctr

  * More work on cleaning up the source tree
  * More work on ferite script duplication

--------------------------------------------------------------------------------------------------------
28.06.2002 14:21 (BST), ctr

  * A slight fix for aphex & triton on darwin

--------------------------------------------------------------------------------------------------------
28.06.2002 12:34 (BST), ctr

  * A clean up of include/ferite/fstructs.h. It is now much cleaner and most of the structures are 
    commented to give developers a better idea of what is going on
  * Some more work on script duplication

--------------------------------------------------------------------------------------------------------
27.06.2002 13:17 (CEST), stephan_eng

  * Added scripts/benchmarks for the Shootout benchmark scripts

--------------------------------------------------------------------------------------------------------
26.06.2002 11:09 (BST), ctr

  * You can now do "... ${a valid ferite expression} ..." and have it placed inthe string when the 
    string is evaluated. This means, instead of doing:
	
	  Console.println( "Array size = " + Array.size(foo) );
	
    You can do:
	
	  Console.println( "Array size = ${ Array.size(foo) }" );
	
    This is an extesion of the $variableName syntax that is in the current implementation
	
  * clean up of ferite varaible to str function
  * made regex script evaluation thread safe
  
--------------------------------------------------------------------------------------------------------
26.06.2002 00:14 (BST), ctr

  * Better threading
  * Ability to tell thread to detach on start
  * Various fixes

--------------------------------------------------------------------------------------------------------
25.06.2002 15:57 (CEST), ctr

  * Initial work on a generaltional GC

--------------------------------------------------------------------------------------------------------
24.06.2002 13:04 (CEST), ctr

  * TcpStream.listen(backlog) added

--------------------------------------------------------------------------------------------------------
24.06.2002 11:42 (CEST), ctr

  * Fix for the parser to allow for empty statments ';'
  * Change the expected conflicts

--------------------------------------------------------------------------------------------------------
21.06.2002 10:55 (BST), ctr

  * Some cleanups and a correct recusive implementation [with a bit of luck] of recursive mutexs

--------------------------------------------------------------------------------------------------------
21.06.2002 02:16 (PDT), ntropy

+ Ported to darwin. Had to make an ad-hoc recursive mutex and add some code to aphex to
  make polling crossplatform

--------------------------------------------------------------------------------------------------------
19.06.2002 14:11 (BST), ctr

  * Dont execute a script if it is unrunable

--------------------------------------------------------------------------------------------------------
18.06.2002 10:55 (BST), ctr

  * fix for ferite_hash_delete(), if the item is in the head of the hash chain, dont remove the entire 
    chain

--------------------------------------------------------------------------------------------------------
17.06.2002 19:26 (BST), ctr

  * A couple more clean ups I missed in the regex memory fix

--------------------------------------------------------------------------------------------------------
17.06.2002 16:43 (BST), ctr

  * Fix for null from an object constructor
  * Fix to make sure the correct line numbers are returned

--------------------------------------------------------------------------------------------------------
17.06.2002 16:24 (BST), ctr

  * Found a bug in the executor introduced with the change in function code
  * Fixed line number bugs

--------------------------------------------------------------------------------------------------------
17.06.2002 13:48 (BST), ctr

  * Start of work to allow for script duplication
  
--------------------------------------------------------------------------------------------------------
17.06.2002 10:58 (BST), ctr

  * Added ferite_script_compile_with_path( char *filename, char **paths );
          ferite_compile_string_with_path( char *str, char **paths );
		  
	These allow you to define a set of paths that are specific to the script being compiled. Eg.
	In a multithreaded enviroment.
  * PCRE now, by default, uses it's own memory mechanisms, pass --fe-use-mm-with-pcre to have jedi 
    used

--------------------------------------------------------------------------------------------------------
17.06.2002 10:16 (BST), ctr

  * Slight bug fix in the compiler - this should solve stephans issue

--------------------------------------------------------------------------------------------------------
17.06.2002 00:59 (BST), ctr

  * Commented GetOptLong
  * Fixed the parser to deal with multiline comments.
  * Fixed a segfault bug in the regex engine

--------------------------------------------------------------------------------------------------------
16.06.2002 19:07 (BST), ctr

  * Fix to the array in-script-code this was seriously b0rked before, but now is correct
  * Memory leak fix in the array duplication code

--------------------------------------------------------------------------------------------------------
16.06.2002 17:21 (BST), ctr

  * removed is* and instanceof from the Reflection module - not needed with the two new operators
  * fixed Reflection.type()
  * changed script/test-suite/reflection.fe to reflect the changes =P

--------------------------------------------------------------------------------------------------------
16.06.2002 14:17 (BST), ctr

  * Added isa and instanceof operators:
  
   isa use -> somevar isa type, eg. "hello" isa string -> true
   insanceof use -> somevar instanceof Sys.StdioStream -> true
   
   see scripts/test/native_inheiritance.fe for an example   
 * Some fixes to the math module 
 * Start of some work on a GetOptLong class
 * Renamed FeriteObject->tmpl to FeriteObject->klass to make it more obvious
 * Updated documentation

--------------------------------------------------------------------------------------------------------
16.06.2002 12:24 (BST), ctr

  * If you want to pass arguements to the script they get placed after a '--'. eg. 
   
      "ferite somescript.fe -- some args to script"
	  
	This makes argument parsing alot more sane
  * More work on feritedoc

--------------------------------------------------------------------------------------------------------
16.06.2002 11:11 (BST), ctr

  * fixed return values from the ferite command line tool to return errors as different values
  * added 'make test' and 'make test-verbose' to the test-suite. This allows the tests to be run to see 
    where stuff is failing.

--------------------------------------------------------------------------------------------------------
15.06.2002 20:00 (BST), ctr

  * Some more clean ups in terms of optimsation

--------------------------------------------------------------------------------------------------------
15.06.2002 19:42 (BST), ctr

  * Cleaner and faster function execution

--------------------------------------------------------------------------------------------------------
15.06.2002 17:26 (BST), ctr
 
  * Removal of some ferite_stop_execution() statements, we only call this if the program must finish

--------------------------------------------------------------------------------------------------------
15.06.2002 15:13 (BST), ctr

  * if you return 'null' from a constructor, an error is thrown, and a null object returned
  * return value from a script, if you do "return x;" at the end of a script's main body it'll be 
    returned to the program
  * fix to Array.getIndex() to stop the segfault, removed Array.walk() - it's target function will be 
    replaced when foreach() gets placed within the code
  * The hash keys for deleted keys should now be removed

--------------------------------------------------------------------------------------------------------
14.06.2002 15:18 (BST), ctr

  * Some more doc tool work, it can now generate a structure of the stuff, next job, write something 
    that can do something with it, and some templates

--------------------------------------------------------------------------------------------------------
13.06.2002 15:48 (BST), ctr

  * exp() is exp() not log()

--------------------------------------------------------------------------------------------------------
13.06.2002 14:43 (BST), ctr

  * Thread.join(thread)
  * start of feritedoc in tools/doc/

--------------------------------------------------------------------------------------------------------
11.06.2002 17:13 (BST), ctr

  * eval is now more fun -> you can modify exisitng stuff :)

--------------------------------------------------------------------------------------------------------
11.06.2002 12:48 (BST), ctr

  * A memory leak and segfault fix in the Sys.Tm class

--------------------------------------------------------------------------------------------------------
11.06.2002 10:36 (BST), ctr

  * All classes now inherit from an 'Object' class. This allows us to do clever things if we want :)

--------------------------------------------------------------------------------------------------------
10.06.2002 22:51 (BST), ctr

  * Proper handling of the dependancies in builder, it will make the _core.c dependant on all .fec files
  * All other .c files depend on the _core.c file, which means that you can now do make -j<some number> 
    to speed up builds, as _core.c will be generated, then the .c files built. tasty.

--------------------------------------------------------------------------------------------------------
10.06.2002 11:36 (BST), ctr

  * Array.join from Christian M. Stamgren <christian@centiongroup.com> - i re-wrote it to make it 
    cleaner
  * when an object is converted to a string, .toString() will be checked for and called. see 
    scripts/test/test2.fe for an example. This means that objects can be easily used.

--------------------------------------------------------------------------------------------------------
10.06.2002 11:15 (BST), ctr

  * this should give proper use of && and || - please check it :)

--------------------------------------------------------------------------------------------------------
07.06.2002 15:50 (BST), ctr

  * work on more feature rich operators

--------------------------------------------------------------------------------------------------------
06.06.2002 12:43 (BST), ctr

  * Testing the use of .foo aswell as using self.foo -> see scripts/test/dot_self.fe

--------------------------------------------------------------------------------------------------------
06.06.2002 11:55 (BST), ctr

  * more builder-closed cleanups
    - correct registration of namespaces
	- correct handling of variables -> the compile wont start polluting the namespace
    - various clean ups
	
	We are almost at 0.99.4 functionality [it would only do this mode]. The next job is better 
	Makefile.am generation which will effect both modes.

--------------------------------------------------------------------------------------------------------
05.06.2002 18:17 (BST), ctr

  * initial work on allowing for completely closed modules from builder, do not use. it's very rough

--------------------------------------------------------------------------------------------------------
05.06.2002 14:31 (BST), ctr

  * A fix in the executor, it restores the file it's executing in on a functions return

--------------------------------------------------------------------------------------------------------
05.06.2002 13:57 (BST), ctr

  * Added Object.hasMember( object, "name" ) to the reflection module

--------------------------------------------------------------------------------------------------------
05.06.2002 12:41 (BST), ctr

  * A couple more fixes where the script was being passed around the compiler correctly
  * Added prefixes to the messages in ferite_error.c

--------------------------------------------------------------------------------------------------------
05.06.2002 11:36 (BST), ctr

  * slight internal name change to avoid conflict!
  * added module-register and module-unregister to builder
  * fix to builder when generating function registration code

--------------------------------------------------------------------------------------------------------
05.06.2002 11:15 (BST), ctr

  * removal of some messages that are not needed
  * use the script if we get passed it. silly me.

--------------------------------------------------------------------------------------------------------
05.06.2002 10:38 (BST), ctr

  * fix to the module stuff that got changed
  * and a compile of logic errors

--------------------------------------------------------------------------------------------------------
04.06.2002 16:02 (CEST), stephan

  * Changed error handling to buffer up instead of printing to stderr or hookup to function pointers

--------------------------------------------------------------------------------------------------------
04.06.2002 12:56 (BST), ctr

  * precedence error for || and &&

--------------------------------------------------------------------------------------------------------
03.06.2002 21:51 (BST), ctr

  * err.errstr err.errno -> err.str err.num respectively
  * err and null can't be used as variable names

--------------------------------------------------------------------------------------------------------
03.06.2002 21:45 (BST), ctr

  * err and null are now reserved variable names. No cookie for you if you use those names.

--------------------------------------------------------------------------------------------------------
03.06.2002 21:27 (BST), ctr

  * Slight fix. To see if a script is valid check to see if script->mainns exists, if it does, got for 
    gold - if not things have fouled up. Read script->last_error for the error messages, then hand the 
	script to ferite_script_delete as per usual. This is slightly saner behavior for builder.

--------------------------------------------------------------------------------------------------------
03.06.2002 21:06 (BST), ctr

  * delete and rename now work all over the shop. This means that namespaces can be worked with and as 
    a direct result you can fiddle with anything!

--------------------------------------------------------------------------------------------------------
03.06.2002 16:44 (BST), ctr

  * rename of global variables show_debug and hide_mem_use
  * thread locking on the compiler, this should work but as yet, is untested
  * change of error reporting. Now during a compile you will always get a script back, if 
    script->last_error != NULL you have a compile error. if it == NULL then you are fine and can 
	execute it

--------------------------------------------------------------------------------------------------------
31.05.2002 16:43 (BST), ctr

  * Slight clean up on constructor calling. Upon object creation a constructor will be called. If there 
    is no constructor, ferite will find the first parent constructor.

--------------------------------------------------------------------------------------------------------
28.05.2002 16:44 (BST), ctr

  * Changes and a fix for a memory leak in aphex, found by valgrind [the tool]

--------------------------------------------------------------------------------------------------------
27.05.2002 12:36 (BST), ctr

  * Now all errors get reported back to the callbacks [->error_cb and ->warning_cb]

--------------------------------------------------------------------------------------------------------
27.05.2002 12:03 (BST), ctr

  * This should stop the same file being used more than once be resovling the entire name, not just the 
    relative paths

--------------------------------------------------------------------------------------------------------
23.05.2002 15:34 (BST), ctr

  * A segfault fix. there was an overflow in the scanner if you have a huge native block of code
    it'll now truncate the native code.

--------------------------------------------------------------------------------------------------------
22.05.2002 18:01 (BST), ctr

  * Added c modifier for regular expressions this allows you to do:
  
     foo =~ c/some (regex)/place_I_want_it_to_go/
	 
	instead of 
	
	 foo =~ m/some (regex)/;
	 place_I_want_it_to_go = r1;
	 
    Fun! :)
	
  * Fixed a memory leak in modules/sys/util_stream.c

--------------------------------------------------------------------------------------------------------
22.05.2002 10:27 (BST), ctr

  * Some fixes higlighted by a sekrit module that I am working on. Basically duff return values, double 
    free's and playing with empty arrays == bad idea

--------------------------------------------------------------------------------------------------------
21.05.2002 17:20 (BST), ctr

  * FE_RETURN_STR returns a FeriteString* not a char* now. This make binary string support from 
    modules

--------------------------------------------------------------------------------------------------------
20.05.2002 13:03 (BST), ctr

  * proper locking in the Stream class
  * various fixes
  * Added Sys.openprocess( cmd, modes )
  * Added Sys.env.* [modules/sys/env.fec]

--------------------------------------------------------------------------------------------------------
18.05.2002 20:39 (BST), ctr

  * Slight changes to cope with the removed cvs modules

--------------------------------------------------------------------------------------------------------
17.05.2002 16:32 (BST), ctr

  * found the bug - issue with stream flushing in sys module

--------------------------------------------------------------------------------------------------------
17.05.2002 15:51 (BST), ctr

  * Some clean ups that I noticed whilst trying to track down some bugs

--------------------------------------------------------------------------------------------------------
16.05.2002 21:21 (BST), ctr

  * thread groups - wont return until all threads are dead
  
  ferite has some threading issues, i am in the process of tracking them down. they tend to rear their 
  ugly head every now and again in the form of memory corruption and various other bits of fun :)

--------------------------------------------------------------------------------------------------------
12.05.2002 18:05 (BST), ctr

  * Divide by zero fix0r

--------------------------------------------------------------------------------------------------------
11.05.2002 08:43 (BST), ctr

  * Ok, this should unbreak stephans code, whilst still maintaining the fix for ppc archs

--------------------------------------------------------------------------------------------------------
10.05.2002 20:05 (BST), ctr

  * test fix

--------------------------------------------------------------------------------------------------------
08.05.2002 10:19 (BST), ctr

  * Real numbers must have atleast a '0' after the decimal point [they need not start with one]
  * Array[foo .. bar] used to only work, now you can do Array[foo..bar]
  

--------------------------------------------------------------------------------------------------------
07.05.2002 20:19 (BST), ctr

  * fixed a bug with variable substitution in the regex engine, this would cause ferite to lock in an 
    endless loop if there was a '$' at the end of the match or swap section

--------------------------------------------------------------------------------------------------------
07.05.2002 12:08 (BST), ctr

  * bug fix in array slice for strings
  
  PLEASE, when you touch ops mark absolutly CERTAIN that they return a variable, even if the variable 
  is a void variable to facilitate the return of an error - ferite will b0rk! This is a C problem!

--------------------------------------------------------------------------------------------------------
07.05.2002 01:17 (BST), ctr

  * Move stat calls into aphex - now all file loading and management is in this library
  * Updated src/ferite_module.c to use the aphex calls

--------------------------------------------------------------------------------------------------------
06.05.2002 23:33 (BST), ctr

  * Added Stream.eos() [end of stream] - works for file and network IO

--------------------------------------------------------------------------------------------------------
06.05.2002 22:12 (BST), ctr

  * some more bug fixes and memory leak fixes
  * scripts/test/bofh.fe - get a BOFH excuse from the net :)

--------------------------------------------------------------------------------------------------------
06.05.2002 18:31 (BST), ctr

  * Fixed about a billion memory leaks!

--------------------------------------------------------------------------------------------------------
06.05.2002 17:19 (BST), ctr

  * Fixed some memory leaks
  * Sys.open() -> Sys.openfile() to better reflect it's use

--------------------------------------------------------------------------------------------------------
06.05.2002 16:34 (BST), ctr
 
  * there are times in ones life when you make stupid. extremely stupid. potentially catstrophic 
    mistakes. this is one of them. I was doing bad thinks with the loaded native modules list. it is 
	fixed now.
  * modulename_deinit is called on script deletion now

--------------------------------------------------------------------------------------------------------
06.05.2002 15:34 (BST), ctr

  * move() is better than chname() imho

--------------------------------------------------------------------------------------------------------
06.05.2002 12:03 (BST), ctr

  * Added FE_RETURN_OBJ
  * Added FE_RETURN_ARRAY
  * Added ferite_object_get_var, ferite_class_get_var, and ferite_object_get_function
  * Added module_unregister mechanism [just need to hook up module_deinit to script deletion]
  * ferite cvs is a bit broken at the minute, trying to find the bug
  * Added ferite_uarray_get_from_string and ferite_uarray_delete_from_string
  * Initial new file, console, network and sys module code. Needs *lots* of work to get it mature 
    enough, but it compiles. The main change that is needed is the passing around of file 
	descriptors/FILE*

--------------------------------------------------------------------------------------------------------
27.04.2002 14:55 (BST), ctr

  * a few cleanups highlighted by xchat-ferite

--------------------------------------------------------------------------------------------------------
27.04.2002 12:27 (BST), ctr

  * a couple of builder fixes

--------------------------------------------------------------------------------------------------------
23.04.2002 12:10 (BST), ctr

  * when you include(ascript) the body is executed :)

--------------------------------------------------------------------------------------------------------
21.04.2002 11:16 (BST), ctr

  * reflection fixes, it now works - doesn't corrupt memory or leak it! ;)

--------------------------------------------------------------------------------------------------------
20.04.2002 13:19 (BST), ctr

  * Fixed builder bug which occurs with namespace or classes within another namespace
  * Fixed the compiler to allow the extension of classes that are within a namespace: see 
    scripts/test/cls_ex_ns_cls.fe
	
--------------------------------------------------------------------------------------------------------
20.04.2002 12:34 (BST), ctr

  * another bug-in-builder fix
  * fixed the inheritance bug highlighted by stephan

--------------------------------------------------------------------------------------------------------
19.04.2002 22:35 (BST), ctr

  * the code at the end of a module is now executed when the module file is parsed. 
    eg.
	 
	 file 'include.fe'
	 
	   Console.println( "in include.fe" );
	   
	 file 'test.fe'
	 
	   uses "console", "include";
	   
	 Running test.fe will cause "in include.fe" to be outputed. Fun,
 

--------------------------------------------------------------------------------------------------------
18.04.2002 08:52 (BST), ctr

  * fix0r that allows flat functions to be atomic
  * fix0r that stops final variables being modified by ++ and --
  * formating in src/ferite_ops.c

--------------------------------------------------------------------------------------------------------
17.04.2002 12:07 (BST), ctr

  * Made src/ferite_ops.c lock the input variables to operators
  * put #ifdef's round new thread code so it is only compiled in when debug is enabled.
  * added locking of functions

--------------------------------------------------------------------------------------------------------
16.04.2002 21:23 (BST), ctr

  * Added ->lock vars to functions and variables
  * Added 'atomic' keyword to scanner
  * Cleaned up the parser a little to reduce shift/reduce conflicts [was 8 now down to 4!]
  * Implemented recursive mutex's in aphex
  * Hooked up code to create and delete the mutex's.
  * Added some warning messages to the compiler

--------------------------------------------------------------------------------------------------------
15.04.2002 08:15 (BST), ctr

  * removed realloc deadlock in ferite_mem_jedi
  * made jedi, classic and gc locking cleaner
  * moved FeriteThread struct into include/ferite/fstructs.h

  TBD:
    * thread sleeping and wakeup
    * 'atomic' keyword that guarantees mutally exculsive access to methods and variables
    * thread groups on a script to stop it returning until they have all
      run. If a thread is still running when the main loop ends ferite will
      segfault!
    * testing!
	
  To use this compile ferite with:
  
    ./autogen.sh --enable-debug
    
  It will only work in debug mode!
  
--------------------------------------------------------------------------------------------------------
14.04.2002 20:40 (BST), ctr

  * Better threading in aphex along with mutex's added
  * Jedi thread safe by default
  * Added GC locking
  * Moved jedi and the gc to use the aphex mutex stuff
  * Removed '->'

--------------------------------------------------------------------------------------------------------
14.04.2002 14:16 (BST), ctr

  * Basic threading. I know this is for 0.99.6. But I got bored with a VRML project =P Basically, 
    dont use this for anything other than a 'proof of concept'. See scripts/test/thread.fe for how to 
	'do' it.

--------------------------------------------------------------------------------------------------------
14.04.2002 11:46 (BST), ctr

  * Better error reporting with the module loader
  * Removed an error message in the compiler as it causes confusion
  * Started to prototype the thread code in aphex

--------------------------------------------------------------------------------------------------------
14.04.2002 09:15 (BST), ctr

  * Fixed regexps

--------------------------------------------------------------------------------------------------------
13.04.2002 10:36 (BST), ctr

  * operators are stored in a table and now referenced by their value rather than their address

--------------------------------------------------------------------------------------------------------
13.04.2002 09:14 (BST), ctr

  * Fixed a bug with the error system not setting the correct string length in src/ferite_error.c
  * Removed some rubbish output I added before
  * Fixed a segfault in the executor to do with variable arguments.
  
--------------------------------------------------------------------------------------------------------
12.04.2002 17:07 (BST), ctr

  * Moved to a GC per loaded script. This reduces GC errors on deletion of objects.
  * Fixed a memory leak in the parser when a module can't be loaded
  * Fixed a issue with ferite_build_object - this shouldn't mark the variable as disposable. 
    ferite_new_object should!

--------------------------------------------------------------------------------------------------------
11.04.2002 13:27 (BST), ctr

  * Fixed a memory leak in src/ferite_string.c in ferite_str_destroy
  * Fixed a memory leak in src/ferite_module.c 

--------------------------------------------------------------------------------------------------------
27.03.2002 08:56 (PST), ntropy

   * Cleaned up a few things in buffer, made it use ferite_variable_tostr
     for it's conversions (centralized features == good thing, multiple
     implementations in one project == bad thing)

--------------------------------------------------------------------------------------------------------
26.03.2002 18:06 (PST), ntropy

   * Added a quote flag to variable_tostr to support convertion in
     different places better.

   * Made OP(add) use variable_tostr instead of it's hackish way ;)

--------------------------------------------------------------------------------------------------------
26.03.2002 17:45 (PST), ntropy

   * Expanded uarray_tostr by adding ferite_variable_tostr, which
     converts any variable to it's string value to be used wherever.

   * Made Console.print and Console.println alot smarter by accepting
     any number of variables via ..., and using ferite_variable_tostr
     to accept and print any variable

--------------------------------------------------------------------------------------------------------
22.03.2002 01:25 (PST), ntropy

   * Fixed a small memory leak in the array stringizer

--------------------------------------------------------------------------------------------------------
22.03.2002 01:05 (PST), ntropy

   * Added the slice operation to [] ops, see script/test/slice.fe for 
     examples
     - syntax: ele[lower .. upper], where 
         - if lower is omitted, 0 is assumed
         - if upper is omitted, the size of the ele - 1 is assumed
         - lower and upper are long's relative to the position of
           first char (position 0), so -1 means the last char (wrapping
           back around)
         - if lower is calculated to be greater then upper, the 
           elements are returned in reverse, the order assumed by the
           programmer. example ele[4 .. 0] returns 
            [ ele[4], ele[3], ..., ele[0] ]
           and ele[-1 .. 0] returns
            [ ele[size - 1], ele[size - 2], ..., ele[1], ele[0] ]
   
   * Arrays can now be stringized by adding them to strings. The string
     representation of the array is the same as the inline array 
     creation method ( the [1, 2, 3] method ) (see script/test/slice.fe
     for usage examples)
     
     - This still needs work because it doesnt recurse if it finds an array
       in the array being stringized, it just handles them the same as
       objects and prints out the mem address of the var

   * Started code for letting inline array creation method accepted named
     keys as well ( so ["one":1, "two":2, "three":3] works )

--------------------------------------------------------------------------------------------------------
11.03.2002 12:35 (GMT), ctr

  * A slight optimsation in the jedi memory system

--------------------------------------------------------------------------------------------------------
10.03.2002 10:21 (GMT), ctr

  * Added FE_RETURN_NULL_OBJECT

--------------------------------------------------------------------------------------------------------
09.03.2002 13:06 (GMT), ctr

  * Some more builder clean ups
  * Modified ferite.m4 to be more usefull in terms of library paths
  * Added a skeleton tree
  * generate-module noew works - see TODO for what needs to be done
  
--------------------------------------------------------------------------------------------------------
08.03.2002 17:07 (GMT), ctr

  * Start of work on a generate-module that is native ferite, going to eat some food and finish it later
  * File.exists() to the File class
  * Fixed an odd bug that was causing self not to be hooked up on script methods with variable argument 
    lists. Dont know why I missed it before.
	
--------------------------------------------------------------------------------------------------------
08.03.2002 14:41 (GMT), ctr

  * a configure patch for pcre fix, and threading from Ian Main <imain@stemwinder.org>

--------------------------------------------------------------------------------------------------------
08.03.2002 14:05 (GMT), ctr

  * Modified builder to allow for more flexible options regarding Makefile.am generation
  * Rebuilt the modules to allow for this, and modfied the configure.in.stub
  
--------------------------------------------------------------------------------------------------------
08.03.2002 13:06 (GMT), ctr

  * Changed the license to be less restrictive [new BSD]
  * Updated all files to reflect this
  * Added the correct copyright on code

--------------------------------------------------------------------------------------------------------
07.03.2002 20:25 (GMT), ctr

  * ferite_new_object can take a NULL for params - means no need for parameter list when calling 
    a constructor without params :)

--------------------------------------------------------------------------------------------------------
02.03.2002 12:09 (GMT), ctr

  * Added two macros FE_ARRAY_ADD_AT_END and FE_ARRAY_ADD_AT_START to make adding things to arrays make 
    more sense :)
  * Updated all code not using this to use this
  
--------------------------------------------------------------------------------------------------------
01.03.2002 23:48 (GMT), ctr

 * Added ferite_number_as_long and ferite_number_as_double - they will take a number variable and 
   convert it to the correct type

--------------------------------------------------------------------------------------------------------
01.03.2002 20:16 (GMT), ctr

  * This is the test suite and the serialize stuff the Stephan Engstr?m <sem@cention.se> wrote
    Sorry for the delay - I have been really busy =/

--------------------------------------------------------------------------------------------------------
01.03.2002 19:49 (GMT), ctr

  * just some stuff

--------------------------------------------------------------------------------------------------------
18.02.2002 11:42 (GMT), ctr

  * script clean ups

--------------------------------------------------------------------------------------------------------
17.02.2002 11:47 (GMT), ctr

  * Start on work for some binary safe strings, they will hold their length with them, plus 'encoding' 
    so that in the future we can hold what encoding they can use, eg. unicode, utf8, compression etc

--------------------------------------------------------------------------------------------------------
17.02.2002 01:51 (GMT), ctr

  * changed ferite_class_get_function() to be more simple :)
  * reformated src/ferite_class.c [*hug jed]

--------------------------------------------------------------------------------------------------------
15.02.2002 14:18 (GMT), ctr

  * Force dword not word alignment in ferite jedi - thanks to Stephan Engstr?m <sem@cention.se> for 
    this fix

--------------------------------------------------------------------------------------------------------
13.02.2002 11:43 (GMT), ctr

  * operator change => to >=

--------------------------------------------------------------------------------------------------------
11.02.2002 18:13 (GMT), ctr

  * String module fixes and a new test script from Stephan Engstr?m <sem@cention.se>

--------------------------------------------------------------------------------------------------------
11.02.2002 14:07 (GMT), ctr

  * Libraries get loaded using a .lib extension now, this stops certain issues with module loading, 
    and it also clarifies to someone reading your code that you are loading a native library.
  * Updated docs

--------------------------------------------------------------------------------------------------------
11.02.2002 10:04 (GMT), ctr

  * Bug highlighted from Jeremy Norris <ishmael27x@yahoo.com>

--------------------------------------------------------------------------------------------------------
10.02.2002 20:55 (GMT), ctr

  * A few more changes to the module stuff, better error recovery, also some slight changes to allow 
    for the code I'll add tomorrow WRT native or script based ferite module initialisers [I'll explain 
	later]

--------------------------------------------------------------------------------------------------------
10.02.2002 14:56 (GMT), ctr

  * pre-loading of modules on the command line, this is also useful for applications
  * added -Pmodule or --preload module

eg.
  
  ferite -Pconsole -e "Console.println('Hello World');"
  
--------------------------------------------------------------------------------------------------------
09.02.2002 20:37 (GMT), ctr

  * some more fixes from Stephan Engstr?m <sem@cention.se> for building, and the file's utility.c

--------------------------------------------------------------------------------------------------------
08.02.2002 16:11 (GMT), ctr

  * docmented the switch statement
  * updated some other files

--------------------------------------------------------------------------------------------------------
08.02.2002 15:36 (GMT), ctr
 
  * first rule of compiler writing. if you change the parser. regerate it.

--------------------------------------------------------------------------------------------------------
08.02.2002 15:11 (GMT), ctr

  * updated some docs

--------------------------------------------------------------------------------------------------------
08.02.2002 13:22 (GMT), ctr

  * a few more clean ups
  
  I am now using this rather than just testing in a sand box :)

--------------------------------------------------------------------------------------------------------
08.02.2002 12:50 (GMT), ctr

  * an attempt to fix the reflection code
  * some fixes with the module loader - it'll be more robust

--------------------------------------------------------------------------------------------------------
08.02.2002 11:14 (GMT), ctr

  * Some copyright updates - thanks to term for pointing them out

--------------------------------------------------------------------------------------------------------
08.02.2002 05:55 (GMT), ctr

  * cleaner platform detection for the native module dir

--------------------------------------------------------------------------------------------------------
08.02.2002 04:35 (GMT), ctr

  * new file loading
  * module system now works
  * added aphex_relative_to_absolute()
  * updated scripts to use new system
  * library is now $prefix/lib/ferite
  * native code now goes in $prefix/lib/ferite/$platform
  * builder works correctly

DO NOT USE THIS YET :) I HAVE YET TO TEST IS THOROUGHLY, it;s being commited
so I dont loose the code. Really, it should work, but i need to test it.

Please have a dig around, look at the fec files, install it into a sepearate 
directory and see what is installed. I will write about how it works after 
testing it :)

Things that need to be sorted:

  - error being thrown when nothing gets loaded into the system
  - reflection seems to be borked - see the test script
  - regex's need tweaking [parser bug in src/ferite_regex.c]
  - module-flags in builder has to be spat in config.m4
  
I will test this thorouly tomorrow at somepoint :)

--------------------------------------------------------------------------------------------------------
07.02.2002 00:51 (GMT), ctr

  * merged the builder and ferite parser
  * changed native functions to be
  
     native function name( args )
	 {
	   /* c code here */
	 }
	 
  * change init, deinit, flags, header keywords to module-init, module-deinit, module-flags and 
    module-header respectively
  * builder adds line and file information to generated c code to make coding easier
  * updated existing modules to use new definitions
  * changed builder to use new parser
  * various clean ups and removals of unsed vars

--------------------------------------------------------------------------------------------------------
06.02.2002 15:03 (GMT), ctr

  * various more fixes from Stephan Engstr?m <sem@cention.se>
  * s/__ferite/ferite/g; on all source code
  * module work :)

--------------------------------------------------------------------------------------------------------
25.01.2002 16:56 (GMT), ctr

  * Added a fix for ferite_get_parameters() from Stephan Engstr?m <sem@cention.se>
    This will stop it segfaulting when passed a NULL.

--------------------------------------------------------------------------------------------------------
19.01.2002 01:42 (GMT), ctr

  * phase one of the regex clean up, this is the parsing. the next is to make the script interface to 
    the aftermath easier to play with :)

--------------------------------------------------------------------------------------------------------
18.01.2002 12:28 (GMT), ctr

  * Complete re-write of the array system, should be alot more effcient than before in both terms of 
    memory and speed. It's light years faster, the script should run in about 40 seconds 
	(scripts/test/huge_but_small.fe), before the script would cause ferite to use in exess of
	about 900Mb of ram (caused my machine with 768Mb ram to swap like hell), now it only uses about 320Mb 
	ram. But I also need to add lossy indexing which means we will only have to re-index the variables 
	within the hash after a lot of shifting. (where time(re-index) < time(find variable))
  * Added declarations of a load of functions to headers
  * Deleted non-used functions
  * Updated rest of the engine to work on new system
  * Some code clean ups
  * Changed jedi to not allocate as much larger memory than smaller memory when doing a morecore

--------------------------------------------------------------------------------------------------------
15.01.2002 12:32 (GMT), ctr

  * Fix ansi escape sequences for octal

--------------------------------------------------------------------------------------------------------
15.01.2002 00:05 (GMT), ctr

  * This should fix darwin builds - it needs -lferite for the modules.

--------------------------------------------------------------------------------------------------------
14.01.2002 22:23 (GMT), ctr

  * Copyright update
  * Author file clean up

--------------------------------------------------------------------------------------------------------
14.01.2002 17:34 (GMT), ctr

  * Modfied the scanner ased upon stuff from pfv
  * Addition of pthread defs to the modules  

--------------------------------------------------------------------------------------------------------
14.01.2002 10:39 (GMT), ctr

  * Fixored a bug in the function parameter checking code, found by Gnea (#e/OPN)
  * Changed display of output messages
  * Added 'delete' to delete a class function
  * Modfied the docs slightly

--------------------------------------------------------------------------------------------------------
14.01.2002 09:15 (GMT), ctr

  * some fix0rs for FreeBSD

--------------------------------------------------------------------------------------------------------
14.01.2002 00:55 (GMT), ctr

  * function renaming in classes - see scripts/test/rename.fe
  * class modifies Foo - modify an existing class
  * namespace modifies Foo - modify an existing namespace (changed from namespace extends foo)

--------------------------------------------------------------------------------------------------------
13.01.2002 23:29 (GMT), ctr

  * Fixes for win32 stuff - it'll be native at somepoint soon :)

--------------------------------------------------------------------------------------------------------
12.01.2002 14:16 (GMT), ctr

  * Some changes to aphex for windows support

--------------------------------------------------------------------------------------------------------
12.01.2002 13:01 (GMT), ctr

  * An initial man page for ferite :)

--------------------------------------------------------------------------------------------------------
12.01.2002 12:30 (GMT), ctr

  * Additions to hopefully get triton working on OpenBSD :)
  
--------------------------------------------------------------------------------------------------------
12.01.2002 11:32 (GMT), ctr

  * ripped out old code that was stolen from imlib2, this code is much cleaner and nicer
  * modifed the engine to use aphex for loading of scripts
  * rewrote the module scanning stuff to make use of aphex - much cleaner :)
  * aphex cleanups - now exports a macro 'DIR_DELIM' for the directory delimiter

--------------------------------------------------------------------------------------------------------
12.01.2002 02:10 (GMT), ctr

  * implemnented unique_prefix()
  * fixed some bugs

--------------------------------------------------------------------------------------------------------
12.01.2002 01:14 (GMT), ctr

  * start on aphex - see the README in libs/aphex/ for more information, once aphex is more complete 
    I will change the engine to use it

--------------------------------------------------------------------------------------------------------
11.01.2002 18:10 (GMT), ctr

  * clean ups, tweaks et al :)
  * wrote a win32 loader for triton :)

--------------------------------------------------------------------------------------------------------
11.01.2002 10:47 (GMT), ctr

  * some clean ups
  * a change to make ferite build like before (ie auto-regeneration of c files in modules)

--------------------------------------------------------------------------------------------------------
09.01.2002 21:56 (GMT), ctr

  Changes based on initial feedback
  
  * More additions from Pete <pfv@voyager.net> (for console, string and system)
  * FreeBSD changes from Jeremy Norris <ishmael27x@yahoo.com>
  * ferite.m4 from Ryan Pavlik <rpav@users.sourceforge.net> to sllow for people to include ferite in 
    their apps more easily:
	
	  This SHOULD be obvious, but here's how you use it.  Just put this in
	  your configure.ac:
	
	  AM_PATH_FERITE(0.99.4,, [echo bitch and whine])
	
	  Which will bitch and whine if ferite isn't found that's at least  
	  0.99.4.  Next just use @FERITE_CFLAGS@ and @FERITE_LIBS@ in the proper
	  targets in your Makefile.am.  That's it.

--------------------------------------------------------------------------------------------------------
09.01.2002 16:03 (GMT), ctr

  * A fix for new checker-outers of cvs ferite

--------------------------------------------------------------------------------------------------------
09.01.2002 16:03 (GMT), ctr

  * 0.99.4 released

--------------------------------------------------------------------------------------------------------
09.01.2002 14:41 (GMT), ctr

  * Final fix, this should be it. We should be on a 0.99.4 release :)

--------------------------------------------------------------------------------------------------------
09.01.2002 12:54 (GMT), ctr

  * Fix for speech, we want Darwin not SunOS
  * Polishing

--------------------------------------------------------------------------------------------------------
09.01.2002 10:33 (GMT), ctr

  * Some fixed suggested by Adam C Powell <hazelsct@mit.edu>
  * A few tweaks here and there - debs now build successfully :)  

--------------------------------------------------------------------------------------------------------
08.01.2002 19:16 (GMT), ctr

  * Build fixes, triton should now work according to plan.

--------------------------------------------------------------------------------------------------------
07.01.2002 12:04 (GMT), ctr

  * When an error or warning occurs, ferite will report which line and file it comes from, this means 
    that trying to work out where stuff is going wrong during execution is easy :)
  * Something else. But I forget.

--------------------------------------------------------------------------------------------------------
06.01.2002 23:03 (GMT), ctr

  * fix to stop a segfault in parameter checking

--------------------------------------------------------------------------------------------------------
06.01.2002 20:42 (GMT), ctr
 
  * Some cleanups
  * Fixed the module loader situation by making sure -ldl was added to the dlfcn loader code
  * Added a new __ferite_check_params method, and a fix to the -ve operator from Andrew Moenk 
    <deimos@kfa.cx>  
  * Tweaked the triton bit to clean up configure
  
--------------------------------------------------------------------------------------------------------
05.01.2002 10:27 (GMT), ctr

  * fixed a bug hilighted by Andrew Moenk <deimos@kfa.cx>. It caused ferite to segfault when you 
    accessed a non existant variable in an object.

--------------------------------------------------------------------------------------------------------
04.01.2002 17:58 (GMT), ctr

  * Some more cleanups after ntropy

--------------------------------------------------------------------------------------------------------
03.01.2002 18:00 (GMT), ntropy

  * Bigger and better reflection
  * libTriton - a cross platform library loader
  
--------------------------------------------------------------------------------------------------------
02.01.2002 16:54 (GMT), ctr

  * Clean ups to the src/ directory making it compile (almost) 97% cleanly with -Wall -ansi -pedantic
  * Changed the FeriteVariable struct slightly to be cleaner  

--------------------------------------------------------------------------------------------------------
29.12.2001 20:29 (GMT), ctr

  * Added File.sync() and File.dataSync() to allow for explicit flushing of data to a physical disk

--------------------------------------------------------------------------------------------------------
29.12.2001 11:56 (GMT), ctr

  * added initialisers for namespace, class and global variables (see the example 
    initialisers_non_function.fe)
  * updated docs
  * a few tweaks to the compi;er here adn there
  
  I think we are nearing a 0.99.4 release fun :)

--------------------------------------------------------------------------------------------------------
28.12.2001 20:09 (GMT), ctr

  * some tweaks to the classic memory manager it'll show all memory unfree'd when using: 
          --fe-show-mem-use --fe-use-classic 
		  
	NB. This is only in debug compile (./autogen.sh --enable-debug)

--------------------------------------------------------------------------------------------------------
23.12.2001 20:54 (GMT), ctr

  * More cleanups in the compiler 
    - removed the second un-used opdate_two and renamed opdata_one to opdata
	- used to use a FeriteVariable VAI'd to hold the address that a instruction should branch to/jump 
	  to, changed that to a long variable 'addr' in the opcode data, updated the executer, this should 
	  reduce memory use a bit (about 20 bytes per op), it should also make things slightly faster
	- compiler request's for the switch statment are now cleared up
    - fixed an issue with multiple files and the array stack (being that it tries to get free'd up more)
  * Fixed the executor so that it allocates enougth memory for the paramerters when we are going for 
    autoload (causing the class memory manager to segfault)
	
  All test scripts should now work with --fe-use-classic and normal ferite. fun. :)

--------------------------------------------------------------------------------------------------------
22.12.2001 17:31 (GMT), ctr

  * Some internal compiler clean ups
  * Some output cleanups
  * Rearranged some of the compiler grammer in preparation of the ability to assign values to variables
    you will be able to set a default value for string and number variables, object, array and void will 
	be a no go. Those will be a v2 feature (it's an internal issue that I dont want to fix)

--------------------------------------------------------------------------------------------------------
22.12.2001 00:06 (GMT), ctr

  * fixed an eval() issue
  * fixed some compiler bugs
  * implemented switch(){} - works pretty much the same as c switch except you can switch on anything, 
    and the switch statement can switch on anything, and the accepting conditions can be expresions :)
    
	- there will be a more advanced test script soon, for now cope with script/test/switch.fe
	
	WARNING: it needs to be tested extensivly, I shall do this tomorrow :)

--------------------------------------------------------------------------------------------------------
20.12.2001 13:36 (GMT), ctr

  * Added the ability to assign an array to a void variable (how did (I forget this?)
  * Added arrays that can be done like [ expr, expr ] - it is also possible to embed an array in another
  * added scripts/test/arrays_in_script.fe
  
  Next to add associativity with expr => "value"
  
--------------------------------------------------------------------------------------------------------
19.12.2001 17:21 (GMT), ctr
  
  * Merged in a new printf
  * Added new Poll class
  
  (from pfv)

--------------------------------------------------------------------------------------------------------
19.12.2001 12:35 (GMT), ctr

  * fixed a bug in the ferite compiler causing it to segfault on a non existant script
  * fixed a bug in builder causing it to also segfault.

--------------------------------------------------------------------------------------------------------
18.12.2001 01:33 (GMT), ctr

  * added pfv's file module - cleaned up some of the code, fixed a few memory issues
  * added pfv's system module, 
     - cleaned up alot of this to stop memory leaks, basically removed the bootstrap code which is 
       unecessary imho
	 - merged the darwin fix into it
	 - removed the use*() methods and replaced them with setEffectiveUser( number uid, number gid )
  * fixed ntopy's ltdl loader for the new loader system - really dont know what crack he was smoking
  * various other fixes

My plan of action now is to add switch to the engine, and then initialisers....

--------------------------------------------------------------------------------------------------------
17.12.2001 15:46 (GMT), ctr
 
  * fixed a bug in __ferite_find_function_in_object
  * Added __ferite_object_call_super to call an object's super class constructor

--------------------------------------------------------------------------------------------------------
17.12.2001 00:04 (GMT), ctr

  * Have fixed a bug hilighted by PoppaVic on irc, basically builder wasn't registering classes in 
    the correct order to ensure they were inheiriting from each other correctly. This fixes that with 
	a cunning algorithm :) 
  * Fix for __ferite_find_namespace for non existance element and type checking

--------------------------------------------------------------------------------------------------------
15.12.2001 15:34 (GMT), ctr

  * Added '...' to builder
  * Fixed 'extends' in builder
  * Uhm. Yes :)
  * Fixed a couple of buglets in the ferite engine
  * Re Implemented Console.printf

--------------------------------------------------------------------------------------------------------
13.12.2001 16:10 (GMT), ctr

 * Fixed an issue with the gc -> checks entire gc now, rather than the first 50
 * Fixed a bug that must have been around for ages WRT self-> in script based classes
 * Added a check to stop ferite segfaulting when trying to access a variable in a null object

--------------------------------------------------------------------------------------------------------
12.12.2001 17:28 (GMT), ctr

  * strucutres when created internally are now done via defiens - allows tweaking of the engine to use 
    different amounts of memory

--------------------------------------------------------------------------------------------------------
11.12.2001 10:15 (GMT), ctr

  * Quick change suggested by ntropy - added int type to the parameter list of __ferite_find_namespace 
    - this allows you to force type checking of the returned bucket. A value of 0 will stop this behaviour

--------------------------------------------------------------------------------------------------------
10.12.2001 22:16 (GMT), ctr

  * Fixed an issue with the global error object
  * added __ferite_set_error( script, errno, msg_format, ... )
  
--------------------------------------------------------------------------------------------------------
21.11.2001 11:47 (GMT), ctr

  * Added prototypes for more functions within the file package
  * Added an ipc module written by Espen <nilsenea@plu.edu> - this is a great start at a fully blown 
    IPC module. Currently it supports SHM with semaphore locking :)
  * Added a new string module by pfv <pfv@voyager.net> - this has a sh*t load of new and useful goodies
  * Changed str[someValue] to return a number representing a chars value

  I just want to say thanks to these two guys for their hardwork :)

--------------------------------------------------------------------------------------------------------
20.11.2001 13:56 (GMT), ctr
 
  * Some more function calls documented. Almost half done now :)

--------------------------------------------------------------------------------------------------------
20.11.2001 02:28 (GMT), ctr

  * With variable arguments to a class we dont want to have self and super (hidden args) mixed in
  * Also added System.execute() to launch a command

--------------------------------------------------------------------------------------------------------
19.11.2001 20:14 (GMT), ctr

  * Changed moduels so the init is modulename_init - this means that in the future people should be 
    able to build static versions of ferite with modules built in and we wont have conflicts! :)
  * Changed the %{ and %} in the buidler app for the header to:
   
     header %{ 
	 %}
	 
  * Added init and deinit versions of the above so people can add code to the initialisation
    and deinititalisation system :)
  * Updated all .fec's in the module directories
  * Fixed __ferite_find_namespace (src/ferite_namespace.c) - it will now do recursive desent on a 
    namespace tree and find a bucket for you. This means ...("Console.println") will get that bucket 
	for you :) NULL return if needs be.
	
  I have some other code - for string and ipc modules. These will be coming in at somepoint soonish.

--------------------------------------------------------------------------------------------------------
18.11.2001 10:01 (GMT), ctr

  * Ok, a while back I changed from using int's and floats to longs and doubles, it was hilighted that 
    the macros and function calls all use the old int and float labels. This has been fixed.
  * Fixed the build system to work - this is now new and improved. You must run ./autogen.sh
  * Modifed builder to generate a more sane Makefile.am (it now places extra files after the generated 
    ones) 
  * Moved configure.in to old.configure.in
  * Upped the version number
  * Added FE_RETURN_STR(), FE_RETURN_TRUE, FE_RETURN_FALSE
  * Updated TODO and ROADMAP

--------------------------------------------------------------------------------------------------------
16.11.2001 00:22 (GMT), ctr

  * fixes for the mysql db module

--------------------------------------------------------------------------------------------------------
15.11.2001 18:09 (GMT), ctr

  * ferite 0.99.3 released.

--------------------------------------------------------------------------------------------------------
15.11.2001 16:30 (GMT), ctr

  * This should make the build system sane :)

--------------------------------------------------------------------------------------------------------
15.11.2001 09:59 (GMT), ctr

  * fixed a memory leak with the include() operator
  * fixed a memory leak with Array.getIndex() 
  * modifed the ROADMAP - this was to allow for the sudden work I had done in other areas (as part of a 
    bug fixing exercise)
  * updated the docs

--------------------------------------------------------------------------------------------------------
14.11.2001 15:50 (GMT), ctr

  * Rewrote a portion of the parameter checking code :)
  * fixed the autoload code
  * added a autload example (scripts/test/autoload.fe)

--------------------------------------------------------------------------------------------------------
14.11.2001 14:54 (GMT), ctr

  * added example (scripts/test/var_args.fe)
  * fixed a segfault in the new code

--------------------------------------------------------------------------------------------------------
14.11.2001 13:53 (GMT), ctr

  * fixed some issues
  * fixed a bug with void variables in function signitures - you can now pass any variable 
  * variable argument lists -> a function variables are placed within the array 'fargs', and 
    it is now possible to specify '...' in the compiler - to specify variable argument lists
  * fixed the docs up to reflect this change
  * variable named 'fncArgs'

--------------------------------------------------------------------------------------------------------
11.11.2001 19:12 (GMT), ctr

  * Added regex /e modfier
  * Updated docs some relating to regexps
  * Synced configure.in and configure.ac

--------------------------------------------------------------------------------------------------------
11.11.2001 16:10 (GMT), ctr

  * re-wrote some operators to be more source clean (removed alot of repetition using macros)
  * added +/- as unary operators  
  * implemented >>, <<, >>=, <<=, &, |, ^, &=, |=, ^=
  * updated docs to reflect the new operators

--------------------------------------------------------------------------------------------------------
10.11.2001 18:06 (GMT), ctr

 * Some changes to help building on sun architecture (sparcs)
    - fixed a bus error in ferite_variables.c
	- added -lferite to the module build stuff
	- modifed the config.m4 for network to add '-lsocket -lnsl' under Solaris
	- added '-lm' for the maths module
	
 * Modifications to builder 
    - fixed the help output
    - added '-k' or '--force-makefile' to force the generation of a Makefile.am

 I want to say thank you to Nathan Yocom <yocomnw@plu.edu> for use of resources to allow me to fix 
 these errors - without him it would not have been possible. (I dont have Solaris)

--------------------------------------------------------------------------------------------------------
07.11.2001 11:42 (GMT), ctr

  * added hex numbers
  * added << >> <<= >>= |= &= (well the stubs)
  * changed the debug macro names to different ones to stop pollution of namespaces
  
  Will clean up ferite_ops.c a hella lot soon (when I write the above operators)

--------------------------------------------------------------------------------------------------------
28.10.2001 15:15 (GMT), ctr

  * added the sgml docuymentation that Blake Watters <blakewatters@nc.rr.com> provided
  * cleaned up the sagml file (it's all nicely formated to make things easier)
  * nicked cK's html customisations :)

--------------------------------------------------------------------------------------------------------
17.10.2001 00:33 (BST), ctr

  * Ok fixed a few buglets here and there
  * Initial implementation of include(), now there are bugs that need to be resolved
     -> there is a memory leak based upon the compiler picking up the first token of
	    the _start method
	 -> there are issues with regards to using uses as exsiting modules and scripts
	    are deleted when the script is compiled (so are not around for stopping reinclusion 
		of modules) - i will tie the include list to the script tomorrow
  * upped the version number
  
  I plan on wadding my way through the operators tomorrow and should have
  them pretty much complete - I am also going to rework some of the existing ones
  
  I will then get regex evals working :)

--------------------------------------------------------------------------------------------------------
08.10.2001 20:16 (BST), ctr

  * 0.99.1 relese version. Please read that changelog for changes.

--------------------------------------------------------------------------------------------------------
10.09.2001 18:07 (BST), ctr

  * ok have been really busy, documenting code, plus taken a number of days of coding this engine.
  * code's more documented in the source file to help people
  
--------------------------------------------------------------------------------------------------------
31.08.2001 09:09 (BST), ctr

 * fixed some symbol names - bug spotted by "Bryce Dooley" <bryced@ameritech.net>, in the compiler for 
   both builder and libferite

--------------------------------------------------------------------------------------------------------
30.08.2001 18:25 (BST), ctr

  * Added two more options to the builder application:
      
	  --init-name <string> : this allows for a person to specify the initialiser function name
	  --no-deinit : stop builder generating a deinit function 
	  --no-makefile : dont generate a makefile
	  --no-configm4 : dont generate a config.m4
	  
	This makes builder nicer for building code for apps.
  * some initial docs for embedding ferite. next thing to do is add docs on creating native functions

--------------------------------------------------------------------------------------------------------
29.08.2001 09:30 (BST), ctr
  
  * fixed a configure bug
  * i suck at spelling, change signiture to signature :)   

--------------------------------------------------------------------------------------------------------
28.08.2001 18:14 (BST), ctr

  * static works in the builder app for both variables and functions. rock. :)
  * added namespace extends <foo> syntax :)

--------------------------------------------------------------------------------------------------------
28.08.2001 01:40 (BST), ctr

  * static members in classes work for both variables and functions
  * static keyword can be used else wehre in namespaces etc but has no effect at the moment.
  * minor changes to prep the builder app, will finish this tomorrow as I am shattered and need sleep :)

--------------------------------------------------------------------------------------------------------
26.08.2001 11:47 (BST), ctr

  * changed #!/bin/bash to #!/bin/sh in modules/build_modules.sh to make FreeBSD happy, also added 
    --include-deps to automake in the same script, thanks to Jeremy Norris <ishmael27@home.com> for the 
	heads up on this.
  * fixed a bug in jedi which was causing some 'issues'. I personally think this is a libc buglet - but 
    the fix keeps things clean anyways
  * classes can now be places in namesapces and be created from within them
  * fixed a constructor bug with regards to scripts (it's signiture is verified against the calling 
    params)  

--------------------------------------------------------------------------------------------------------
25.08.2001 21:55 (BST), ctr

  * a fix for pcre issues
  * upped the version number so that we know we aint with 0.99.0

--------------------------------------------------------------------------------------------------------
20.08.2001 22:22 (BST), ctr

  * We are going for release

--------------------------------------------------------------------------------------------------------
15.08.2001 21:15 (BST), ctr

 * Some more additions to the modules specifically, System and time

--------------------------------------------------------------------------------------------------------
15.08.2001 17:41 (BST), ctr

  * more work on the sql module this should make it completely functional
  * some conditional build additions and some fixes

--------------------------------------------------------------------------------------------------------
14.08.2001 10:58 (BST), ctr

  * made the gc and the jedi memory manager thread safe with pthread mutex's

--------------------------------------------------------------------------------------------------------
12.08.2001 11:30 (BST), ctr

  * work on making things thread safe
  * fixing a buglet that Lawrence Manning (lawrence@smoothwall.org) found

--------------------------------------------------------------------------------------------------------
07.08.2001 19:26 (BST), ctr

  * this should be the real regex fix. damn I hate string manipluations in c - the error was basically
    the swap regex was fouling up the buffer and over writing memory - this only showed itself with
    big data. This should be the final time I have to fix this - touch wood :)

--------------------------------------------------------------------------------------------------------
07.08.2001 16:34 (BST), ctr

  * Another bug fix0red, this time it was overflowing the swap buffer in the s/// regex. This has
    been fixed. Nice :)

--------------------------------------------------------------------------------------------------------
07.08.2001 12:19 (BST), ctr

  * fixed a bug hilighted by mikoyan <hckx@netscape.net>  regarding the super->method() in non 
    constructor places. It was a stupid bug and it has been fixed :)

--------------------------------------------------------------------------------------------------------
07.08.2001 01:06 (BST), ctr

  * dtopped a dumb arsed regex buffer overflow. i suck at times - i really do.
  * a couple of optimsations within the regex engine

--------------------------------------------------------------------------------------------------------
06.08.2001 20:18 (BST), ctr

  * added error and warning callbacks. The error call back is only called if an exception is called
    whereas the warnings will always be called.                     ( ^^ a non handled one)
  * added it to mod_ferite

--------------------------------------------------------------------------------------------------------
06.08.2001 18:16 (BST), ctr

  * remove global script 

--------------------------------------------------------------------------------------------------------
06.08.2001 17:37 (BST), ctr

  * in now compiles it should be almost there but got a little way to go

--------------------------------------------------------------------------------------------------------
06.08.2001 01:12 (BST), ctr

 * ferite wont compile now. I broke it deliverately. I am making things far more threadsafe
   and multiple things running at the same time safe. This should take a few more days to complete.
   It will be worth it in the long run as multiple threads will be able to run concurrently, the
   main issue at the moment is the error code as that is global ans causes all sorts of dubious
   issues. This will eventually allow me to make even compliation context sensitive so that
   compliations executions and the like can all be done in parallel 

--------------------------------------------------------------------------------------------------------
03.08.2001 13:40 (BST), ctr

  * fixed a bug regarding trying to access a method within a null object. 
  * added some code to stop recusive adding of script files, it also has the side effect of stopping
    multiple includes of the same scripts (not a correct thing) and stops wastage with regards to
    multiple module includes.
  * proper search paths using ferite_add_search_path() and ferite_delete_search_paths();
  * upped the version number
  * added variable substiution to regex's. now $var will be replaced like "$var", and follows the same 
    scope rules (ie global or function)

--------------------------------------------------------------------------------------------------------
02.08.2001 18:25 (BST), ctr

  * had to rewrite mod_ferite as I deleted it somehow. It's now pretty much alot better.
  * fixed a buglet with ferite which caused a file to be compiled after another one to cause
    segfault (a stack was not nullified properly and the line count was not reset).
  * rectified a scanner issue regarinf T_LABEL - vars can now be started with a '_'
  * cookies can now be used via httpd/cookies.feh - very cool :)

--------------------------------------------------------------------------------------------------------
31.07.2001 22:09 (BST), ctr

  * added cookie support to mod_ferite
  * made is so that if variables are passed to a webpage via query or cookies, they wont be repeated

--------------------------------------------------------------------------------------------------------
31.07.2001 17:36 (BST), ctr

  * added variable suppoer to the builder application :)

--------------------------------------------------------------------------------------------------------
31.07.2001 12:33 (BST), ctr

  * have added '' strings which will output exactly what is in them, i am going to add a slight change
    in functionality to other systems and that is to add the $variableName to it.
  * some changes in other places to make things a little cleaner.
  * started mod_ferite a couple of days ago, it's current status is as follows:
      o load, compile and run ferite scripts
      o output buffering (hidden) and flushing, header and content control via the 'httpd'
        namespace (done via a builder module)
      o export of form variables into the global avariable section, currently only GET works, still
        trying to work out apache (will aim to fix this once I get back from holiday as it's 
        currently almost impossible for me to dial up to the net in france)
        This si because I feel that POST should also be handled, unfortunatly the CGI module's code
        doesn't seem to work with us..........
      o will handle .fe and .fhtml file
    The next set of things to be implmented are:
      o script cacheing
      o web based configuration -> ie. special scripts with server configuration ability -> via
        a special namespace -> httpd_conf?
      o ability to add hooks to the apache engine (write modules within ferite)
      o configuration via apache module

  NB: I am going to have to add execution contexts to the ferite engine soon such that we dont ever
      access global variables, eg compiler errors, execution error, current script. The only stuff we
      have global is the memory access functions and settings.

--------------------------------------------------------------------------------------------------------
26.07.2001 13:02 (BST), ctr

  * server socket now works, have a look at the server.fe in the network directory

--------------------------------------------------------------------------------------------------------
26.07.2001 08:41 (BST), ctr

  * fixed a recursive error with the networking -> readln() wont keep b0rking
    it'll just return an empty string (and an exception thrown)

--------------------------------------------------------------------------------------------------------
26.07.2001 07:05 (BST), ctr
 
  * some fixes for building ferite
  * added argv array to all scripts for command line arguments - needs cleaning up, but works :)

--------------------------------------------------------------------------------------------------------
25.07.2001 21:33 (BST), ctr

  * more work on sql stuff (rock!) we can now select stuff and get results :)
  * configured the memory manager so it's a runtime choice rather than
    compile time - tres cool, makes debugging easier :)

--------------------------------------------------------------------------------------------------------
24.07.2001 22:01 (BST), ctr

  * some sql changes - work mainly on getting mysql support up and running
  * more xml work

--------------------------------------------------------------------------------------------------------
20.07.2001 14:07 (BST), ctr

  * More xml cleanups
  * helper functions for native->script functions (for building a parameter list, and for calling a funcion 
    from a FeriteFunction * struct )
  * eval operator cleanups
  * added String.trim()

--------------------------------------------------------------------------------------------------------
19.07.2001 16:20 (BST), ctr

  * more work on xml module
  * some fixes for function calling

--------------------------------------------------------------------------------------------------------
19.07.2001 13:54 (BST), ctr

  * new build system based on php's (i like it)
  * xmlrpc script (beginnings of)
  * xml module (beginnigs of)

--------------------------------------------------------------------------------------------------------
18.07.2001 13:46 (BST), ctr

  * fixed build system
  * commited it all

--------------------------------------------------------------------------------------------------------
18.07.2001 02:15 (BST), ctr

  * added a cgi.fe script (al-la cgi-lib.pl)
  * we is now using libltdl properly
  * builder will now only output stuff to stdout if passed -v
  * modified build_modules.sh such that each step of the (slow) makefile generation has a '.' echo'd -
    tells the user that something is being done.

--------------------------------------------------------------------------------------------------------
17.07.2001 17:55 (BST), ctr

  * more fun work on modules, build method has been fixed
  * all old modules are now on the new system

--------------------------------------------------------------------------------------------------------
17.07.2001 12:36 (BST), ctr

  * re doing the build system -> modules should get automatically built -> they are now all going
    to be using builder (hey why not)
      - build_modules.sh in the modules directory will build make files and generated the correct files 
        so that a "make" will build the corrct modules, it'll also case modules to be built
	
  * added the following features to builder:
      - make clean will cause files generated by builder to be removed
      - -a <file> will cause an external file to be included into the Makefile.am
      - builder will automatically be called if $modulename_core.c isn't found.
    Now all that needs to be done is the hooking up of variables into builder
    
  * started re-writing existing module code so that it is alot cleaner and tidier.

--------------------------------------------------------------------------------------------------------
16.07.2001 10:04 (BST), ctr

  * added the ability to do $variable name in a stirng to add it.... 

--------------------------------------------------------------------------------------------------------
13.07.2001 16:25 (BST), ctr

  * Whoa piles of changes can't think of all of them just yet but heres the summary:
    - added logos to docs/images
    - more work on documentation (regular epxression and builder mainly)
    - work on builder - it now generates c, h and makefiles
    - moved the engine over to using uarray exclusiviely only one issue found so far
      but that only needs to be dealt with slightly differently (is foo[0] wont work unless [0] exists)
    - started writing the existing modules using builder, need to work out a dash cunning build process 
      such that modules automatically get rebuilt on-da-fly
    - fixed scripts to reflect changes
    - still moving ferite over to libltdl
    - started investigating a win32 port. I think someone more dedicated should do this.
    

--------------------------------------------------------------------------------------------------------
10.07.2001 00:09 (BST), ctr

  * moving ferite back to the older libltdl - more portable
  * working on builder a tool to make writing modules easy :-)

--------------------------------------------------------------------------------------------------------
27.06.2001 13:28 (BST), 

  * Updated the scripts makefile.am so they all get installed

--------------------------------------------------------------------------------------------------------

26.06.2001 21:07 (BST), ctr

  * fixed all remaining issues with uarrays.

--------------------------------------------------------------------------------------------------------
25.06.2001 14:44 (BST), 
  
  * made some changes to try and get the commits list working......

--------------------------------------------------------------------------------------------------------
12.06.2001 19:00 (BST), ctr

  * Some more changes to the documentation stuff.

--------------------------------------------------------------------------------------------------------
09.06.2001 14:47 (BST), ctr

  * fixed and issue with truth values
  * started working on some serious documentation - atleast when we pre-release people will be able to 
    read the docs

--------------------------------------------------------------------------------------------------------
08.06.2001 15:35 (BST), ctr

  * Some more fixes (things that were sparked off due to the console buglet)

--------------------------------------------------------------------------------------------------------
08.06.2001 14:09 (BST), ctr

  * Finally found the bug that was causing memory corruption with regard to objects. It was all due to 
    the Console module over writing the memory it was allocated. This was causing all sorts of evilness. 
    Fixed that by making sure the buffer it allocated wan't well, allocated -> there is no need.
  * changes to objects allocated internally - you can now do if xyz == null. It also doesn't use as much 
    memory. 

--------------------------------------------------------------------------------------------------------
29.05.2001 18:16 (BST), ctr

  * Some clean ups
  * Fixed a bug within the error stuff
  - Realised that i seriously need to add the context stuff to remove the need for global variables

--------------------------------------------------------------------------------------------------------
26.05.2001 16:09 (BST), ctr

  * fixed bug in returning an operator's return from a method -> it wasn't being free'd up - caused a huge 
    memory leak in the recursion test script
  * removed the nasty assertion checking in the executor -> now propogates errors up the system
  * change syntax of scripts such that all varaibles in a function must be declared at the beginning (read 
    same as c). This was done because i think's it messy mixing code and declarations of variables 
    (looses read ability)
  * added better error recovery 
  * fixed a bug regarding the gc and objects being used within a function see object_test.fe to see what 
    caused it - it was causing segfaults when trying to delete the object.
  * cleaned up the error and warning messages from the old fugly way to a cleaner method employed by gcc.

--------------------------------------------------------------------------------------------------------
26.05.2001 13:51 (BST), ctr

  * fixed the file module to compile on non linuxy machines more cleanly

--------------------------------------------------------------------------------------------------------
26.05.2001 13:43 (BST), ctr

  * woah, no work for a while - been real busy with exams.
  * fixed null scripts -> ferite will pull an error when it can't include or compile another script in
  * cleaned up warnings
  * a minor tweak to the lexer - on test.fe a splurious 'r' was there and caused it to be echo'd to 
    screen.
  * some clean ups in the file module (bzero -> memset)

--------------------------------------------------------------------------------------------------------
07.05.2001 00:55 (BST), ctr

  * added script to the calling of native functions so thinga know where they are being called from

--------------------------------------------------------------------------------------------------------
06.05.2001 23:46 (BST), ctr

  * fixed some symbol conflicts within the module loader

--------------------------------------------------------------------------------------------------------
27.04.2001 12:18 (BST), ctr

  * back ticks work, \1 and so forth. I have also allowed for escaping of the ticks

--------------------------------------------------------------------------------------------------------
27.04.2001 00:49 (BST), ctr

  * Added emlemtry regex swap support what needs to be done now is 
      - back ticks '\<insert number here>'
      - eval
      - string capture

--------------------------------------------------------------------------------------------------------
21.04.2001 16:30 (BST), ctr

  * the modules are more ansi friendly - this are clean :)

--------------------------------------------------------------------------------------------------------
20.04.2001 23:43 (BST), ctr

  * making ferite more ansi friendly

--------------------------------------------------------------------------------------------------------
14.04.2001 12:29 (BST), ctr

  * some build issues for compiling external modules (spec. mem)

--------------------------------------------------------------------------------------------------------
13.04.2001 00:17 (BST), ctr

  * more bug fixes 
  * object, object is now automativally tacked onto the end of class methods


--------------------------------------------------------------------------------------------------------
12.04.2001 19:14 (BST), ctr

  * fixes to function calling
  * fixed number checking within paramter passing
  * fixed class method calling
  * fixed a gc issue
  * added scripts/ directory, now all script stuff goes in there and is installed to 
    $PREFIX/lib/ferite/scripts make more sense as binary stuff goes in modules
  * cleaned up some build issues - so that code doesn't get rebuilt unless necessary
  * fixed memory leak in new operator
  * fixed memory leak in String module
  

--------------------------------------------------------------------------------------------------------
12.04.2001 01:36 (BST), ctr

  * wrote a native description to signiture convertor - needs some work
  * some compiler clean ups higlighted with the new code
  - still some bugs related to object oriented functions will fix those tomorrow :)

--------------------------------------------------------------------------------------------------------
11.04.2001 00:23 (BST), ctr

  * fixed the check parameters stuff
  * cleaned up the function calling in the executor
  * fixed ferite_get_parameter_count() it now returns the correct number
  * now both internal and external methods/functions run off the same singiture system
  * cleaner parameter checking
  

--------------------------------------------------------------------------------------------------------
10.04.2001 00:58 (BST), ctr

  * rewrote function parameters internal and external functions share the same signiture checking
  * cleaned up namespace api
  * cleaned up executor code
  * changed some of the code in ferite_function.c
  * updated modules to newer api
  * changed some varaible names within compiler to reduce symbol conflict
  * modifed the parser to deal with new parameter registering system
  
  TBD: o better signiture definition method for external functions -> make it more like
         sciprintg
       o better args passed <-> signiture checking
       o named arguemtn passing and ordering in params checking
       o macros to make api cleaner

04.07.2001 03:32 (PDT), ntropy

  * moved the Utils Str code to the String module, Utils is now empty

--------------------------------------------------------------------------------------------------------
03.04.2001 19:47 (BST), ctr

  * corrected Net module
  * corrected Timer module
  * fixed build issue with array module
  * move FE_SELF macro from the File module into the ferite.h header
  * TODO changes
  
  I am curently preparing for a huge code hack0ring session. These are just some cleanups.

--------------------------------------------------------------------------------------------------------
02.04.2001 12:25 (BST), ctr

  * wow, another month. I have c++ised ferite.h that should be enough (you
    should only need to include ferite.h and i should happily cover the other
    includes
  * upped the version number to 0.7

--------------------------------------------------------------------------------------------------------
11.03.2001 13:58 (GMT), ctr

  * dont know what i've done, but richlowe is bugging me on irc for a commit.

--------------------------------------------------------------------------------------------------------
07.03.2001 19:10 (GMT), ctr   

  * adding some skelton api, still need to convert older modules over to the new namespace API

--------------------------------------------------------------------------------------------------------
05.03.2001 08:10 (GMT), ctr

  * start of array types -> starts as a linear array, then can be turned into associative array using 
    Array module. This still need to be completed -> but the internal mechanisms are there.

--------------------------------------------------------------------------------------------------------
04.03.2001 18:49 (GMT), ctr

  * fixed the jedi memory manager - it now works, in test.fe you only ever hit the OS 59 times as opposed 
    to 6102 times.

--------------------------------------------------------------------------------------------------------
26.02.2001 15:45 (GMT), ctr

  * more ork on jedi -> it works now, all I need to do is make it 
       alot faster :)
       total amount of ram used configurable

--------------------------------------------------------------------------------------------------------
25.02.2001 21:25 (GMT), ctr

  * more work on jedi mm

--------------------------------------------------------------------------------------------------------
25.02.2001 18:07 (GMT), ctr

  * start of the jedi memory manager for ferite. this will ultimatly be based on the algorithm
    described in malloc.c in the perl distribution. This strikes me as a nice, and very fast method 
    for virtual heap allocation.
  * adding more modules to the system - jjust put directories there to remind me :)

--------------------------------------------------------------------------------------------------------
23.02.2001 17:17 (GMT), ctr

  * namespace syntax added
  * cleaned up the parser
  * more cleanups to the compiler

--------------------------------------------------------------------------------------------------------
23.02.2001 12:56 (GMT), ctr

  * fixed the eval() operator -> the script it compiled on the fly would not be freed up.

--------------------------------------------------------------------------------------------------------
22.02.2001 19:52 (GMT), ctr

  * mwhahaha. i rock. fixed a stupid bug within the hashing code that was casuing all sorts of segfaults 
    in the compiler - it would basically cause the head of a hash bucket list to not be made NULL 
    therefore would not be percieved as being empty. Although you mileage would vary depending on the script.

--------------------------------------------------------------------------------------------------------
22.02.2001 10:36 (GMT), ctr

  * fixed ptoential bug due to module loading failure
  * as the module will only ever get loaded once -> we need to call the module_init() for each and every 
    script that needs it.
  * modified the current modules to check for the symbols within the namespace

--------------------------------------------------------------------------------------------------------
22.02.2001 08:30 (GMT), ctr

  * cleaned upthe error stuff a little more. still is't quiet right, but is getting there
  * more compiler clean ups
  * fixed issues regarding the included script being dead -> causes overal compilation failure - fixed, 
    now works correctly.
  * fixed segfault pertaining to not actually load the script before trying to compile it into the system. 
    WHY? because I am a cripple and can't actually keep lines.

--------------------------------------------------------------------------------------------------------
21.02.2001 18:18 (GMT), ctr

  * masive compiler clean ups, now on a syntax error the compiler wont die,
    and neither will ferite force and exit but clen up properly. this rocks
  * cleanup to error messages

--------------------------------------------------------------------------------------------------------
21.02.2001 11:31 (GMT), ctr

  * added commit.pl which was blatantly stolen from good ol' enlightenments
    cvs server this should make life easier :)

--------------------------------------------------------------------------------------------------------
20.02.2001 16:33 (GMT), ctr

  * fixed a bug within the compiler -> the __ferite_compile_string wasn't compiling properly for 
    execution (missing some of the script entities).
  * fixed some crazy issues that had slipped through regarding the headers and the actual methods 
    called.
  * added -e to the ferite commandline tool so you can now do
  
      ferite -e "uses Console; Console.println(\"Hello World\");"
      
    and it will run the script :)

--------------------------------------------------------------------------------------------------------
20.02.2001 12:04 (GMT), ctr

  * fixed the tests/super.fe script, i wanted to see the eorr handling working.
  * changed the fatal error message style as the last one suck0r
  * cleaned up some stuff in the changelog
  
--------------------------------------------------------------------------------------------------------
19.02.2001 22:03 (GMT), ctr

  * hrmm, more clean ups more of the scripts now work, and the error handling
    is done properly. 
  * all the test scripts bar the one for ferk work. loverly.
  
--------------------------------------------------------------------------------------------------------
19.02.2001 18:11 (GMT), ctr

  * ok no updates for a while, as i have been real busy
  * namespace is even cleaner now - there is no way one script could
    interfere with another
  * compiler clean ups
  * api clean ups
  * test program clean ups

--------------------------------------------------------------------------------------------------------
07.02.2001 14:36 (GMT), ctr

  * hrmm lots of stuff, done a load of namespace stuff (that went up within the last commit)
  * cleanup of some of the compiler code
  
--------------------------------------------------------------------------------------------------------
02.01.2001 20:11 (GMT), ctr

  - fixed a bug with the Console.printf() it require two or more parameters, but it should only require
    one atleast one.
  - fixed an issue with recursive errors (leads to messy segfaults)
  - fixed an issue with the scanner and freeing up a file name

--------------------------------------------------------------------------------------------------------
29.12.2000 12:36 (GMT), ctr

  * more changes to the error handling (small clean ups)
  * some changes to the op code naming - cleaned up some

--------------------------------------------------------------------------------------------------------
28.12.2000 23:51 (GMT), ctr

  * fixed the error handling so that one may have embeded iferr's in a script. toy.

--------------------------------------------------------------------------------------------------------
28.12.2000 23:13 (GMT), ctr

  * added super object to each class -> so you can call parent methods :)

--------------------------------------------------------------------------------------------------------
27.12.2000 18:47 (GMT), ctr

  * added "continue" will work with while() for() and do..while loops
  * added "break" see above. btw FYI this is the most evil of all keywords ;) even more so than
    error handling. it basically requies keeping track of the current construct you are in, then 
    going back and updating the address of each JMP instruction generated. fun.well atleast it's now done :)
  * sligh tweaks in the compiler...

--------------------------------------------------------------------------------------------------------
27.12.2000 15:41 (GMT), ctr

  * fixes within error recovery
  * added exception handling within the ferite engine
    
       iferr {
         ... code that might go wrong ...
       } fix {
         ... handler code ... 
       } [ else {
         .. code executed if no expcetion caused ...
       } ]
       
    the []'s denote not necessary, - still needs work so you can have
    exception handler within exception handlers.
  * some more fixes within the compiler (silly bug)
  * executor fixes

--------------------------------------------------------------------------------------------------------
20.12.2000 18:10 (GMT), ctr

HA!. Ok you will need slang to be installed, also make sure you have libpcre3
and libpcre3-dev installed if you have debian (the older versions suck). for the
slang stuff it's slang1 and slang1-dev that you will need (debian). Other dists
sort ya self out :)

test/ferk this is the start of ferk the ferite irc client currently window stuff
is being done :) this requires the new Screen object (which requires slang)

various clean ups within the object stuff

--------------------------------------------------------------------------------------------------------
17.12.2000 03:05 (GMT), ctr

  * ok ferite will now load another script file into the system to use this just do
  
     uses "<script name";
  
    currently the script to be loaded needs to be either a correct relative URL or 
    and abosulte url. once I have added search path checking for script loading this
    will become a useful feature :)
  * some clean ups in the parser area :)

--------------------------------------------------------------------------------------------------------
15.12.2000 00:43 (GMT), ctr

  * Removed the libs/ dir finally gave up and left giblet have his way :) besides it makes more sense
    and avoids the name conflicts that php and perl are having for example as a result of compiled in 
    symbols.
  * Added inheritance to ferite. Currently it can cope with inherited methods and varaibles. I need to
    add super as an object inherited classes as a refernce to itself as the parent class. fun. :)
  * various clean ups around the place :)

--------------------------------------------------------------------------------------------------------
11.12.2000 08:43 (GMT), ctr

  * moved functions stored within class's and objects over to using hashes. this means alot less work
    to find a function whilst executing. Currently we wont notice much of a difference, but as there
    are alot of functions going into classes the speed imporvement should be seen.
  * classes are now all held in a hash - once again a perfomance thing :)
  * fixed spelling of Enviroment to Environment :) (thanks humming)
  * fixed all code pertaining to the above changes

--------------------------------------------------------------------------------------------------------
10.12.2000 14:00 (GMT), ctr

  * Added better error detection on adding functions to a class or object. before it would allow you to 
    do it but not now :) (thanks to humming for higlighting that bug)
    
--------------------------------------------------------------------------------------------------------
09.12.2000 11:30 (GMT), ctr

  * added modulus operator :)

--------------------------------------------------------------------------------------------------------
09.12.2000 11:05 (GMT), ctr

  * added script classes - very toy
  * added constructor on script classes
  * change function from "function <type> <name>" to "fucntion <name>"
  * even better script function checking :)
  * added string indexing (via the array[] brackets)
  * a few clean ups in the executor

--------------------------------------------------------------------------------------------------------
26.11.2000 17:50 (GMT), ctr

  * fixed some issues with function parameter checking (yes there are still some :)
  * made regex m//g act more like perl after some testing (ought to write the s/// code)
  * made some changes to Console::printf
  * fixed two segfault bugs within the executor (mainly regarding global objects) and also fixed a (what
    could be) nasty memory leak bug -> memory was not being freed before the executor did a runner....
  * done other stuff but forgotten what it was...  

--------------------------------------------------------------------------------------------------------
19.11.2000 19:27 (GMT), ctr

  * fixed some more stuff up
  * i *need* to allow include( expression ) for other script files

--------------------------------------------------------------------------------------------------------
19.11.2000 17:49 (GMT), ctr

  * a number of clean ups
  * stopped using libltdl -> it cause very very odd behaviour with certain libs, this was shown in
    the Gtk module (caused the library thingy within linux to segfault). Changed back tpo using a 
    cleaner internal version with an aim to support the different loading mechanisms for different
    OS's. Currently only for -ldl. If anyone would sort this outforother OS'd please shout
  * *much* cleaner parameter checking for external parameters, it'll detect bad stuff and shout :)
  * much more Gtk stuff :)

--------------------------------------------------------------------------------------------------------
15.11.2000 21:32 (GMT), ctr

  * lots of fixes and changes and even more code clen ups -> will now recover even better after an internal
    error
  * added a Gtk module -> this will change fairly rapidly over the coming weeks as i want to write and app 
    in Gtk using ferite (for ferite). Currently buttons, labels, windows and hbox's are abvailible. Events
    work on all objects using .addEvent( string:event, string:function name to handle it ). Added a gtk test
    script.
  * fixed a highly obscure bug within ferite_get_parameters(). The bug caused memory to get corrupted resulting
    in *highly* odd behaviour. It was a result of the function getting and object, but not advancing through
    the va_list of arguments
  * added "true" and "false" to the scripting engine.

--------------------------------------------------------------------------------------------------------
13.11.2000 11:04 (GMT), ctr

  * fixed an issue in returning a value from an eval, this is now fixed. as far as i am concerned, the 
    eval operator acts as a dynamic anonymous function -> ie they have no set return type, and the contents
    is dynamic. i like.
  * multi line strigns are now accepted, -> need to add a non escape string al la '' in perl and {} in tcl.  

--------------------------------------------------------------------------------------------------------
12.11.2000 02:49 (GMT), ctr

  * added --enable-debug to turn on and off the debuging within the ferite engine at the compile time
    -> make it easy than changing header filers around.

--------------------------------------------------------------------------------------------------------
12.11.2000 01:53 (GMT), ctr

  * better error detection and recovery -> error propgates up through the system allowing the system
    to clean up gracefully.
  * clean up of some of the syntax -> ie you can have as many functions/global/use blocks as you want
    -> just make sure that the classes from which you wish to instantiate are loaded into the system
    first.

--------------------------------------------------------------------------------------------------------
10.11.2000 20:24 (GMT), ctr

  * fixed local scope variables on eval()
    NB. if you happen to have a variable in the eval called "xyz" and a variable in the function you are 
    currently in called the same, the one in the function will be scoped before the one in the eval.
  * with the test script is shows that on release i will have to compile without debug code, on the basis
    that release stuff is 22x faster than debug :)

--------------------------------------------------------------------------------------------------------
10.11.2000 02:26 (GMT), ctr

  * ok, the code cleanup stuff is painfully broken. i need to investigate. but thats for another day,
    along with locally scoped variables within an eval op.
  * nailed new line ug within the compiler. damn printf's :)

--------------------------------------------------------------------------------------------------------
10.11.2000 02:10 (GMT), ctr

  * more clena ups regarding the regex code
  * internal chage as to how code is compiled ie added in a few more redirections regarding the compiler
    interface to allow for eval().
  * added eval() operator to the ferite engine, it works vbery niceley.
  * added execution tracking regarding variables and stuff this is for two reasons, 1) when we fire off
    a ferite_error() we want to be able to free up all memory eaten up by a script as we dont want to exit
    the host app just because someone write a bad script, and 2) it allows up to make it look like eval()
    code runs in the same enviroment as the other code within a function.
  * changes to the way the code is executed - moved code out of the execution function into a cleaner place.

--------------------------------------------------------------------------------------------------------
07.11.2000 23:17 (GMT), ctr

  * finsihed of matching code -> now works just like perl. wikkid. the /g operator will return an array
    of matches, with the number of matches held in the "Count" array location.
  * constant variables are now working. use "final" key word on a varaible, once a value has been assigned
    to it - it is set to being read only
  * small number of changes to the compiler

--------------------------------------------------------------------------------------------------------
06.11.2000 09:34 (GMT), ctr

  * preliminary matching on regex's work -> need to do alot more work to get any where near the 
    functionality of perl, but we will get there -> see test/test.fe for more info on what works  

--------------------------------------------------------------------------------------------------------
05.11.2000 13:35 (GMT), ctr

  * added pcrelib (Perl Compatible Regular Expressions Library -> by Philip Hazel <ph10@cam.ac.uk>, see
    libs/libpcre/AUTHORS and libs/libpcre/* for more information) as part of the move towards regular 
    expressions within ferite.
  * moved libltdl into libs/ along with pcre for a cleaner tree
  * hacked together the pcre to work with the current build tree
  * added src/ferite_regex.c and include/ferite/fregex.h

--------------------------------------------------------------------------------------------------------
05.11.2000 02:54 (GMT), ctr

  * added the start of support for regex's within the compiler -> need to work out best way for internal 
    storage (ie precompile)
  * fixed huge bug with the scanner -> it was reseting to it's initial state (S_SCRIPTING) everytime the 
    scanner ran -> which crippled forward looking for ceratin stuff (eg object properties and regex's)
  * worked out how folding worked in jed -> enabled in some files (src/ferite_ops.c, src/ferite_execute.c, 
    test/main.c). This is to make the files i spend all my life in easier to navigate. 
  * if you run jed i have added some mode stuff so that the ferite_scanner.l and ferite_parser.y files are 
    higlighted along with the test/*.fe
  * automatic stack cleaning during execution -> cause a slight slow down but worth it for the reduce in 
    memory sage
  * various clena ups and fixes.

----------------------------------------------------------------------------------------------------------
04.11.2000 19:40 (GMT), ctr

  * changed the way numbers are handled inside some more (ie if you are going to jump to a *very* big
    number in longs -> flip over to doubles)
  * change function declaration from "<type> <name> ( <params> ) {}" to "function <type> <name> ( <params> ) 
    {}"
  * fixed some issues with numbers and   values
  * fixed the add operator realating to strings
  * created hidden function _start for scripts so you now need not create *any* functions and just type
    code -> this makes things like eval() a little easier to implement
  * changed the internal representation of floats to doubles and int's to longs (still refered to as floats 
    and ints in methods -> just container is a little bigger)
  * created the type "array", not it's a container to put other information in -> ie you can mixed floats, 
    objects etc etc (PITA having array->type)
